//THIS FILE IS MACHINE GENERATED, DO NOT EDIT
#include <jni.h>
#include <stddef.h>

/**
 * initializes the the state of the generated code. Must be called once when your library loads. 
 * returns true if initialization succeeds. If this method returns false then an exception is pending in the JNIEnv that explains the error.
 * it is recommended to call this method in your JNI_OnLoad method
*/
jboolean jnigenerator_init(JNIEnv * env);

/**
 * destroys the the state of the generated code. You can safely call jnigenerator_init() again afterwards. 
 * it is recommended to call this method in your JNI_OnUnload method
*/
void jnigenerator_destroy(JNIEnv * env);

/**
 * equivalent to (*env)->ExceptionCheck(env) just much shorter to write.
 */
jboolean jerr(JNIEnv * env);

/**
 * Creates a new byte array of the given length and copies the give buffer into it.
 * Return NULL when array creation fails. In this case a java exception is thrown.
 */
jbyteArray jarrayB(JNIEnv * env, jbyte * buffer, jsize len);

/**
 * Returns the enum ordinal or -1 if the passed enum value is NULL.
 */
jint jenum_ordinal(JNIEnv * env, jobject enumValue);

/**
 * Returns the name of the enum constant or NULL passed enum value is NULL.
 */
jstring jenum_name(JNIEnv * env, jobject enumValue);

jboolean jinstanceof_IllegalStateException(JNIEnv * env, jobject value);
jboolean jinstanceof_ResourceTemporarilyUnavailableException(JNIEnv * env, jobject value);
jboolean jinstanceof_CommConfig(JNIEnv * env, jobject value);
jboolean jinstanceof_RegData(JNIEnv * env, jobject value);
jboolean jinstanceof_UnknownNativeErrorException(JNIEnv * env, jobject value);
jboolean jinstanceof_Msghdr(JNIEnv * env, jobject value);
jboolean jinstanceof_RegData$RegType(JNIEnv * env, jobject value);
jboolean jinstanceof_GUID(JNIEnv * env, jobject value);
jboolean jinstanceof_NullPointerException(JNIEnv * env, jobject value);
jboolean jinstanceof_InetAddress(JNIEnv * env, jobject value);
jboolean jinstanceof_UnrecoverableMutexException(JNIEnv * env, jobject value);
jboolean jinstanceof_DCB(JNIEnv * env, jobject value);
jboolean jinstanceof_Passwd(JNIEnv * env, jobject value);
jboolean jinstanceof_ShellExecuteException(JNIEnv * env, jobject value);
jboolean jinstanceof_InvalidFileDescriptorException(JNIEnv * env, jobject value);
jboolean jinstanceof_DefaultLinuxConstProvider(JNIEnv * env, jobject value);
jboolean jinstanceof_Stat(JNIEnv * env, jobject value);
jboolean jinstanceof_Sockaddr(JNIEnv * env, jobject value);
jboolean jinstanceof_RegEnumKeyExResult(JNIEnv * env, jobject value);
jboolean jinstanceof_Collection(JNIEnv * env, jobject value);
jboolean jinstanceof_MemoryFaultException(JNIEnv * env, jobject value);
jboolean jinstanceof_MibIpForwardRow2(JNIEnv * env, jobject value);
jboolean jinstanceof_NotLinkException(JNIEnv * env, jobject value);
jboolean jinstanceof_InconsistentMutexException(JNIEnv * env, jobject value);
jboolean jinstanceof_CommProp(JNIEnv * env, jobject value);
jboolean jinstanceof_InetSocketAddress(JNIEnv * env, jobject value);
jboolean jinstanceof_FileNotFoundException(JNIEnv * env, jobject value);
jboolean jinstanceof_Exception(JNIEnv * env, jobject value);
jboolean jinstanceof_PollFD$PollEvent(JNIEnv * env, jobject value);
jboolean jinstanceof_Group(JNIEnv * env, jobject value);
jboolean jinstanceof_SpDeviceInfoData(JNIEnv * env, jobject value);
jboolean jinstanceof_AccessDeniedException(JNIEnv * env, jobject value);
jboolean jinstanceof_ReadOnlyFileSystemException(JNIEnv * env, jobject value);
jboolean jinstanceof_SpDeviceInterfaceData(JNIEnv * env, jobject value);
jboolean jinstanceof_PermissionDeniedException(JNIEnv * env, jobject value);
jboolean jinstanceof_BindException(JNIEnv * env, jobject value);
jboolean jinstanceof_Win32FileAttributeData(JNIEnv * env, jobject value);
jboolean jinstanceof_Iterable(JNIEnv * env, jobject value);
jboolean jinstanceof_ArrayList(JNIEnv * env, jobject value);
jboolean jinstanceof_IllegalMonitorStateException(JNIEnv * env, jobject value);
jboolean jinstanceof_InvalidPathException(JNIEnv * env, jobject value);
jboolean jinstanceof_FileSystemLoopException(JNIEnv * env, jobject value);
jboolean jinstanceof_MutexAbandonedException(JNIEnv * env, jobject value);
jboolean jinstanceof_IpAdapterAddresses(JNIEnv * env, jobject value);
jboolean jinstanceof_ConnectException(JNIEnv * env, jobject value);
jboolean jinstanceof_NoSuchElementException(JNIEnv * env, jobject value);
jboolean jinstanceof_QuotaExceededException(JNIEnv * env, jobject value);
jboolean jinstanceof_Statvfs(JNIEnv * env, jobject value);
jboolean jinstanceof_ComStat(JNIEnv * env, jobject value);
jboolean jinstanceof_RegQueryInfoKeyResult(JNIEnv * env, jobject value);
jboolean jinstanceof_UnsupportedOperationException(JNIEnv * env, jobject value);
jboolean jinstanceof_ResourceBusyException(JNIEnv * env, jobject value);
jboolean jinstanceof_Iovec(JNIEnv * env, jobject value);
jboolean jinstanceof_Iterator(JNIEnv * env, jobject value);
jboolean jinstanceof_NotDirectoryException(JNIEnv * env, jobject value);
jboolean jinstanceof_IOException(JNIEnv * env, jobject value);
jboolean jinstanceof_IllegalArgumentException(JNIEnv * env, jobject value);
jboolean jinstanceof_FileAlreadyExistsException(JNIEnv * env, jobject value);
jboolean jinstanceof_IpAdapterAddresses$IpAdapterUnicastAddress(JNIEnv * env, jobject value);
jboolean jinstanceof_FileIsDirectoryException(JNIEnv * env, jobject value);
jboolean jinstanceof_Cmsghdr(JNIEnv * env, jobject value);
jboolean jinstanceof_SharingViolationException(JNIEnv * env, jobject value);
jboolean jinstanceof_Utsname(JNIEnv * env, jobject value);
jboolean jinstanceof_OperationInProgressException(JNIEnv * env, jobject value);
jboolean jinstanceof_MemoryPoisonedException(JNIEnv * env, jobject value);
jboolean jinstanceof_IfNameIndex(JNIEnv * env, jobject value);
jboolean jinstanceof_PollFD(JNIEnv * env, jobject value);
jboolean jinstanceof_OutOfMemoryError(JNIEnv * env, jobject value);
jboolean jinstanceof_CommTimeouts(JNIEnv * env, jobject value);
void jset_DefaultLinuxConstProvider_AF_UNSPEC(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_AF_UNSPEC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_AF_UNIX(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_AF_UNIX(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_AF_INET(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_AF_INET(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_AF_INET6(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_AF_INET6(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_AF_NETLINK(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_AF_NETLINK(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SOCK_STREAM(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SOCK_STREAM(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SOCK_DGRAM(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SOCK_DGRAM(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SOCK_RAW(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SOCK_RAW(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_NETLINK_ROUTE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_NETLINK_ROUTE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SOL_SOCKET(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SOL_SOCKET(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_DEBUG(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_DEBUG(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_REUSEADDR(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_REUSEADDR(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_TYPE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_TYPE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_ERROR(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_ERROR(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_DONTROUTE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_DONTROUTE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_BROADCAST(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_BROADCAST(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_SNDBUF(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_SNDBUF(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_RCVBUF(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_RCVBUF(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_SNDBUFFORCE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_SNDBUFFORCE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_RCVBUFFORCE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_RCVBUFFORCE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_KEEPALIVE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_KEEPALIVE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_OOBINLINE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_OOBINLINE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_NO_CHECK(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_NO_CHECK(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_PRIORITY(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_PRIORITY(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_LINGER(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_LINGER(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_BSDCOMPAT(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_BSDCOMPAT(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_REUSEPORT(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_REUSEPORT(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_PASSCRED(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_PASSCRED(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_PEERCRED(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_PEERCRED(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_RCVLOWAT(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_RCVLOWAT(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_SNDLOWAT(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_SNDLOWAT(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_RCVTIMEO(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_RCVTIMEO(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_SNDTIMEO(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_SNDTIMEO(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_SECURITY_AUTHENTICATION(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_SECURITY_AUTHENTICATION(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_SECURITY_ENCRYPTION_TRANSPORT(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_SECURITY_ENCRYPTION_TRANSPORT(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_SECURITY_ENCRYPTION_NETWORK(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_SECURITY_ENCRYPTION_NETWORK(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_BINDTODEVICE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_BINDTODEVICE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_ATTACH_FILTER(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_ATTACH_FILTER(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_DETACH_FILTER(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_DETACH_FILTER(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_GET_FILTER(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_GET_FILTER(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_PEERNAME(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_PEERNAME(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_TIMESTAMP(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_TIMESTAMP(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SCM_TIMESTAMP(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SCM_TIMESTAMP(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_ACCEPTCONN(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_ACCEPTCONN(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_PEERSEC(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_PEERSEC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_PASSSEC(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_PASSSEC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_TIMESTAMPNS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_TIMESTAMPNS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SCM_TIMESTAMPNS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SCM_TIMESTAMPNS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_MARK(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_MARK(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_TIMESTAMPING(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_TIMESTAMPING(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SCM_TIMESTAMPING(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SCM_TIMESTAMPING(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_PROTOCOL(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_PROTOCOL(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_DOMAIN(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_DOMAIN(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_RXQ_OVFL(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_RXQ_OVFL(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_WIFI_STATUS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_WIFI_STATUS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SCM_WIFI_STATUS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SCM_WIFI_STATUS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_PEEK_OFF(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_PEEK_OFF(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_NOFCS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_NOFCS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_LOCK_FILTER(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_LOCK_FILTER(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_SELECT_ERR_QUEUE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_SELECT_ERR_QUEUE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_BUSY_POLL(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_BUSY_POLL(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_MAX_PACING_RATE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_MAX_PACING_RATE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_BPF_EXTENSIONS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_BPF_EXTENSIONS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_INCOMING_CPU(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_INCOMING_CPU(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_ATTACH_BPF(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_ATTACH_BPF(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_DETACH_BPF(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_DETACH_BPF(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_ATTACH_REUSEPORT_CBPF(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_ATTACH_REUSEPORT_CBPF(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_ATTACH_REUSEPORT_EBPF(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_ATTACH_REUSEPORT_EBPF(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_CNX_ADVICE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_CNX_ADVICE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SCM_TIMESTAMPING_OPT_STATS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SCM_TIMESTAMPING_OPT_STATS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_MEMINFO(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_MEMINFO(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_INCOMING_NAPI_ID(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_INCOMING_NAPI_ID(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_COOKIE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_COOKIE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SCM_TIMESTAMPING_PKTINFO(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SCM_TIMESTAMPING_PKTINFO(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_PEERGROUPS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_PEERGROUPS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SO_ZEROCOPY(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SO_ZEROCOPY(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SCM_RIGHTS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SCM_RIGHTS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MAP_SHARED(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MAP_SHARED(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MAP_PRIVATE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MAP_PRIVATE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_ACCMODE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_ACCMODE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_RDONLY(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_RDONLY(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_WRONLY(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_WRONLY(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_RDWR(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_RDWR(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_CREAT(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_CREAT(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_EXCL(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_EXCL(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_NOCTTY(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_NOCTTY(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_TRUNC(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_TRUNC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_APPEND(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_APPEND(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_NONBLOCK(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_NONBLOCK(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_NDELAY(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_NDELAY(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_SYNC(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_SYNC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_ASYNC(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_ASYNC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_LARGEFILE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_LARGEFILE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_DIRECTORY(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_DIRECTORY(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_NOFOLLOW(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_NOFOLLOW(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_CLOEXEC(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_CLOEXEC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_DIRECT(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_DIRECT(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_NOATIME(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_NOATIME(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_PATH(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_PATH(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_O_DSYNC(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_O_DSYNC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_S_IRUSR(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_S_IRUSR(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_S_IWUSR(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_S_IWUSR(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_S_IXUSR(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_S_IXUSR(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_S_IRGRP(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_S_IRGRP(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_S_IWGRP(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_S_IWGRP(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_S_IXGRP(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_S_IXGRP(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_S_IROTH(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_S_IROTH(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_S_IWOTH(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_S_IWOTH(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_S_IXOTH(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_S_IXOTH(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_S_IRWXU(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_S_IRWXU(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_S_IRWXG(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_S_IRWXG(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_S_IRWXO(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_S_IRWXO(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFNAMSIZ(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_IFNAMSIZ(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SIOCGIFFLAGS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SIOCGIFFLAGS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SIOCSIFFLAGS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SIOCSIFFLAGS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_SIOCGIFMTU(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_SIOCGIFMTU(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_NLM_F_REQUEST(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_NLM_F_REQUEST(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_NLM_F_DUMP(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_NLM_F_DUMP(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_NLM_F_MULTI(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_NLM_F_MULTI(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_NLM_F_CREATE(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_NLM_F_CREATE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_NLM_F_EXCL(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_NLM_F_EXCL(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_NLM_F_ACK(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_NLM_F_ACK(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_NLMSG_NOOP(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_NLMSG_NOOP(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_NLMSG_ERROR(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_NLMSG_ERROR(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_NLMSG_DONE(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_NLMSG_DONE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_NLMSG_OVERRUN(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_NLMSG_OVERRUN(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTM_GETLINK(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_RTM_GETLINK(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTM_DELADDR(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_RTM_DELADDR(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTM_GETADDR(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_RTM_GETADDR(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTM_NEWADDR(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_RTM_NEWADDR(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RT_SCOPE_UNIVERSE(JNIEnv * env, jobject instance, jbyte value);
jbyte jget_DefaultLinuxConstProvider_RT_SCOPE_UNIVERSE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_ARPHRD_NETROM(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_ARPHRD_NETROM(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFLA_IFNAME(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_IFLA_IFNAME(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFA_UNSPEC(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_IFA_UNSPEC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFA_ADDRESS(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_IFA_ADDRESS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFA_LOCAL(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_IFA_LOCAL(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFA_LABEL(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_IFA_LABEL(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFA_BROADCAST(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_IFA_BROADCAST(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFA_ANYCAST(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_IFA_ANYCAST(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFA_CACHEINFO(JNIEnv * env, jobject instance, jshort value);
jshort jget_DefaultLinuxConstProvider_IFA_CACHEINFO(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFA_F_PERMANENT(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_IFA_F_PERMANENT(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFA_F_SECONDARY(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_IFA_F_SECONDARY(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFF_UP(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_IFF_UP(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_IFF_NO_PI(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_IFF_NO_PI(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_TUNSETIFF(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_TUNSETIFF(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_TUNSETPERSIST(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_TUNSETPERSIST(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_TUNGETSNDBUF(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_TUNGETSNDBUF(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_UNSPEC(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_UNSPEC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_DST(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_DST(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_SRC(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_SRC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_IIF(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_IIF(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_OIF(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_OIF(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_GATEWAY(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_GATEWAY(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_PRIORITY(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_PRIORITY(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_PREFSRC(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_PREFSRC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_METRICS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_METRICS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_MULTIPATH(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_MULTIPATH(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_PROTOINFO(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_PROTOINFO(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_FLOW(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_FLOW(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_CACHEINFO(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_CACHEINFO(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_SESSION(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_SESSION(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_MP_ALGO(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_MP_ALGO(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_TABLE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_TABLE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_MARK(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_MARK(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_MFC_STATS(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_MFC_STATS(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_VIA(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_VIA(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_NEWDST(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_NEWDST(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_PREF(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_PREF(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_ENCAP_TYPE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_ENCAP_TYPE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_ENCAP(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_ENCAP(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_EXPIRES(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_EXPIRES(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_PAD(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_PAD(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_UID(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_UID(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_TTL_PROPAGATE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_TTL_PROPAGATE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_IP_PROTO(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_IP_PROTO(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_SPORT(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_SPORT(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_DPORT(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_DPORT(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_RTA_NH_ID(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_RTA_NH_ID(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_PTHREAD_MUTEX_STALLED(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_PTHREAD_MUTEX_STALLED(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_PTHREAD_MUTEX_ROBUST(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_PTHREAD_MUTEX_ROBUST(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_PTHREAD_PROCESS_SHARED(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_PTHREAD_PROCESS_SHARED(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_PTHREAD_PROCESS_PRIVATE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_PTHREAD_PROCESS_PRIVATE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_PTHREAD_MUTEX_RECURSIVE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_PTHREAD_MUTEX_RECURSIVE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_PTHREAD_MUTEX_ERRORCHECK(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_PTHREAD_MUTEX_ERRORCHECK(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_PTHREAD_MUTEX_DEFAULT(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_PTHREAD_MUTEX_DEFAULT(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_PTHREAD_MUTEX_NORMAL(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_PTHREAD_MUTEX_NORMAL(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_CLOEXEC(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_CLOEXEC(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_ALLOW_SEALING(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_ALLOW_SEALING(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_HUGETLB(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_HUGETLB(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_HUGE_64KB(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_HUGE_64KB(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_HUGE_512KB(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_HUGE_512KB(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_HUGE_1MB(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_HUGE_1MB(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_HUGE_2MB(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_HUGE_2MB(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_HUGE_8MB(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_HUGE_8MB(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_HUGE_16MB(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_HUGE_16MB(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_HUGE_256MB(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_HUGE_256MB(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_HUGE_1GB(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_HUGE_1GB(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_HUGE_2GB(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_HUGE_2GB(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MFD_HUGE_16GB(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MFD_HUGE_16GB(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_DONTNEED(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_DONTNEED(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_NORMAL(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_NORMAL(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_RANDOM(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_RANDOM(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_SEQUENTIAL(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_SEQUENTIAL(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_WILLNEED(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_WILLNEED(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_REMOVE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_REMOVE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_DONTFORK(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_DONTFORK(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_DOFORK(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_DOFORK(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_HWPOISON(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_HWPOISON(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_MERGEABLE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_MERGEABLE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_UNMERGEABLE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_UNMERGEABLE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_HUGEPAGE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_HUGEPAGE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_NOHUGEPAGE(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_NOHUGEPAGE(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_DONTDUMP(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_DONTDUMP(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_DODUMP(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_DODUMP(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_WIPEONFORK(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_WIPEONFORK(JNIEnv * env, jobject instance);
void jset_DefaultLinuxConstProvider_MADV_KEEPONFORK(JNIEnv * env, jobject instance, jint value);
jint jget_DefaultLinuxConstProvider_MADV_KEEPONFORK(JNIEnv * env, jobject instance);
jobject jnew_DefaultLinuxConstProvider(JNIEnv * env);
jint jcall_DefaultLinuxConstProvider_AF_INET(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_AF_INET6(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_AF_NETLINK(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_AF_UNIX(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_AF_UNSPEC(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_ARPHRD_NETROM(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_IFA_ADDRESS(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_IFA_ANYCAST(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_IFA_BROADCAST(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_IFA_CACHEINFO(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_IFA_F_PERMANENT(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_IFA_F_SECONDARY(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_IFA_LABEL(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_IFA_LOCAL(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_IFA_UNSPEC(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_IFF_NO_PI(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_IFF_UP(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_IFLA_IFNAME(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_IFNAMSIZ(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_DODUMP(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_DOFORK(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_DONTDUMP(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_DONTFORK(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_DONTNEED(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_HUGEPAGE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_HWPOISON(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_KEEPONFORK(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_MERGEABLE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_NOHUGEPAGE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_NORMAL(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_RANDOM(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_REMOVE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_SEQUENTIAL(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_UNMERGEABLE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_WILLNEED(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MADV_WIPEONFORK(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MAP_PRIVATE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MAP_SHARED(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_ALLOW_SEALING(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_CLOEXEC(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_HUGETLB(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_HUGE_16GB(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_HUGE_16MB(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_HUGE_1GB(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_HUGE_1MB(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_HUGE_256MB(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_HUGE_2GB(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_HUGE_2MB(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_HUGE_512KB(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_HUGE_64KB(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_MFD_HUGE_8MB(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_NETLINK_ROUTE(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_NLMSG_DONE(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_NLMSG_ERROR(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_NLMSG_NOOP(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_NLMSG_OVERRUN(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_NLM_F_ACK(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_NLM_F_CREATE(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_NLM_F_DUMP(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_NLM_F_EXCL(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_NLM_F_MULTI(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_NLM_F_REQUEST(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_ACCMODE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_APPEND(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_ASYNC(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_CLOEXEC(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_CREAT(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_DIRECT(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_DIRECTORY(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_DSYNC(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_EXCL(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_LARGEFILE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_NDELAY(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_NOATIME(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_NOCTTY(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_NOFOLLOW(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_NONBLOCK(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_PATH(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_RDONLY(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_RDWR(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_SYNC(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_TRUNC(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_O_WRONLY(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_PTHREAD_MUTEX_DEFAULT(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_PTHREAD_MUTEX_ERRORCHECK(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_PTHREAD_MUTEX_NORMAL(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_PTHREAD_MUTEX_RECURSIVE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_PTHREAD_MUTEX_ROBUST(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_PTHREAD_MUTEX_STALLED(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_PTHREAD_PROCESS_PRIVATE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_PTHREAD_PROCESS_SHARED(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_CACHEINFO(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_DPORT(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_DST(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_ENCAP(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_ENCAP_TYPE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_EXPIRES(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_FLOW(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_GATEWAY(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_IIF(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_IP_PROTO(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_MARK(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_METRICS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_MFC_STATS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_MP_ALGO(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_MULTIPATH(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_NEWDST(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_NH_ID(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_OIF(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_PAD(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_PREF(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_PREFSRC(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_PRIORITY(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_PROTOINFO(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_SESSION(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_SPORT(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_SRC(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_TABLE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_TTL_PROPAGATE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_UID(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_UNSPEC(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_RTA_VIA(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_RTM_DELADDR(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_RTM_GETADDR(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_RTM_GETLINK(JNIEnv * env, jobject instance);
jshort jcall_DefaultLinuxConstProvider_RTM_NEWADDR(JNIEnv * env, jobject instance);
jbyte jcall_DefaultLinuxConstProvider_RT_SCOPE_UNIVERSE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SCM_RIGHTS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SCM_TIMESTAMP(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SCM_TIMESTAMPING(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SCM_TIMESTAMPING_OPT_STATS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SCM_TIMESTAMPING_PKTINFO(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SCM_TIMESTAMPNS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SCM_WIFI_STATUS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SIOCGIFFLAGS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SIOCGIFMTU(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SIOCSIFFLAGS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SOCK_DGRAM(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SOCK_RAW(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SOCK_STREAM(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SOL_SOCKET(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_ACCEPTCONN(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_ATTACH_BPF(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_ATTACH_FILTER(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_ATTACH_REUSEPORT_CBPF(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_ATTACH_REUSEPORT_EBPF(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_BINDTODEVICE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_BPF_EXTENSIONS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_BROADCAST(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_BSDCOMPAT(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_BUSY_POLL(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_CNX_ADVICE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_COOKIE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_DEBUG(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_DETACH_BPF(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_DETACH_FILTER(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_DOMAIN(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_DONTROUTE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_ERROR(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_GET_FILTER(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_INCOMING_CPU(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_INCOMING_NAPI_ID(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_KEEPALIVE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_LINGER(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_LOCK_FILTER(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_MARK(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_MAX_PACING_RATE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_MEMINFO(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_NOFCS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_NO_CHECK(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_OOBINLINE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_PASSCRED(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_PASSSEC(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_PEEK_OFF(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_PEERCRED(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_PEERGROUPS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_PEERNAME(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_PEERSEC(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_PRIORITY(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_PROTOCOL(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_RCVBUF(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_RCVBUFFORCE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_RCVLOWAT(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_RCVTIMEO(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_REUSEADDR(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_REUSEPORT(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_RXQ_OVFL(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_SECURITY_AUTHENTICATION(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_SECURITY_ENCRYPTION_NETWORK(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_SECURITY_ENCRYPTION_TRANSPORT(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_SELECT_ERR_QUEUE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_SNDBUF(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_SNDBUFFORCE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_SNDLOWAT(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_SNDTIMEO(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_TIMESTAMP(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_TIMESTAMPING(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_TIMESTAMPNS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_TYPE(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_WIFI_STATUS(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_SO_ZEROCOPY(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_S_IRGRP(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_S_IROTH(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_S_IRUSR(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_S_IRWXG(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_S_IRWXO(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_S_IRWXU(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_S_IWGRP(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_S_IWOTH(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_S_IWUSR(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_S_IXGRP(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_S_IXOTH(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_S_IXUSR(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_TUNGETSNDBUF(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_TUNSETIFF(JNIEnv * env, jobject instance);
jint jcall_DefaultLinuxConstProvider_TUNSETPERSIST(JNIEnv * env, jobject instance);
void jset_Cmsghdr_cmsg_level(JNIEnv * env, jobject instance, jint value);
jint jget_Cmsghdr_cmsg_level(JNIEnv * env, jobject instance);
void jset_Cmsghdr_cmsg_type(JNIEnv * env, jobject instance, jint value);
jint jget_Cmsghdr_cmsg_type(JNIEnv * env, jobject instance);
void jset_Cmsghdr_payload(JNIEnv * env, jobject instance, jbyteArray value);
jboolean jsetA_Cmsghdr_payload(JNIEnv * env, jobject instance, jbyte * value, jsize len);
jbyteArray jget_Cmsghdr_payload(JNIEnv * env, jobject instance);
jobject jnew_Cmsghdr(JNIEnv * env);
jint jcall_Cmsghdr_getLevel(JNIEnv * env, jobject instance);
jbyteArray jcall_Cmsghdr_getPayload(JNIEnv * env, jobject instance);
jint jcall_Cmsghdr_getType(JNIEnv * env, jobject instance);
void jcall_Cmsghdr_setPayload(JNIEnv * env, jobject instance, jbyteArray p0);
void jset_ComStat_fCtsHold(JNIEnv * env, jobject instance, jlong value);
jlong jget_ComStat_fCtsHold(JNIEnv * env, jobject instance);
void jset_ComStat_fDsrHold(JNIEnv * env, jobject instance, jlong value);
jlong jget_ComStat_fDsrHold(JNIEnv * env, jobject instance);
void jset_ComStat_fRlsdHold(JNIEnv * env, jobject instance, jlong value);
jlong jget_ComStat_fRlsdHold(JNIEnv * env, jobject instance);
void jset_ComStat_fXoffHold(JNIEnv * env, jobject instance, jlong value);
jlong jget_ComStat_fXoffHold(JNIEnv * env, jobject instance);
void jset_ComStat_fXoffSent(JNIEnv * env, jobject instance, jlong value);
jlong jget_ComStat_fXoffSent(JNIEnv * env, jobject instance);
void jset_ComStat_fEof(JNIEnv * env, jobject instance, jlong value);
jlong jget_ComStat_fEof(JNIEnv * env, jobject instance);
void jset_ComStat_fTxim(JNIEnv * env, jobject instance, jlong value);
jlong jget_ComStat_fTxim(JNIEnv * env, jobject instance);
void jset_ComStat_cbInQue(JNIEnv * env, jobject instance, jlong value);
jlong jget_ComStat_cbInQue(JNIEnv * env, jobject instance);
void jset_ComStat_cbOutQue(JNIEnv * env, jobject instance, jlong value);
jlong jget_ComStat_cbOutQue(JNIEnv * env, jobject instance);
jobject jnew_ComStat(JNIEnv * env);
jlong jcall_ComStat_getCbInQue(JNIEnv * env, jobject instance);
jlong jcall_ComStat_getCbOutQue(JNIEnv * env, jobject instance);
jlong jcall_ComStat_getfCtsHold(JNIEnv * env, jobject instance);
jlong jcall_ComStat_getfDsrHold(JNIEnv * env, jobject instance);
jlong jcall_ComStat_getfEof(JNIEnv * env, jobject instance);
jlong jcall_ComStat_getfRlsdHold(JNIEnv * env, jobject instance);
jlong jcall_ComStat_getfTxim(JNIEnv * env, jobject instance);
jlong jcall_ComStat_getfXoffHold(JNIEnv * env, jobject instance);
jlong jcall_ComStat_getfXoffSent(JNIEnv * env, jobject instance);
void jcall_ComStat_setCbInQue(JNIEnv * env, jobject instance, jlong p0);
void jcall_ComStat_setCbOutQue(JNIEnv * env, jobject instance, jlong p0);
void jcall_ComStat_setfCtsHold(JNIEnv * env, jobject instance, jint p0);
void jcall_ComStat_setfDsrHold(JNIEnv * env, jobject instance, jint p0);
void jcall_ComStat_setfEof(JNIEnv * env, jobject instance, jint p0);
void jcall_ComStat_setfRlsdHold(JNIEnv * env, jobject instance, jint p0);
void jcall_ComStat_setfTxim(JNIEnv * env, jobject instance, jint p0);
void jcall_ComStat_setfXoffHold(JNIEnv * env, jobject instance, jint p0);
void jcall_ComStat_setfXoffSent(JNIEnv * env, jobject instance, jint p0);
void jset_CommConfig_dwSize(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommConfig_dwSize(JNIEnv * env, jobject instance);
void jset_CommConfig_wVersion(JNIEnv * env, jobject instance, jint value);
jint jget_CommConfig_wVersion(JNIEnv * env, jobject instance);
void jset_CommConfig_dcb(JNIEnv * env, jobject instance, jobject value);
jobject jget_CommConfig_dcb(JNIEnv * env, jobject instance);
void jset_CommConfig_dwProviderSubType(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommConfig_dwProviderSubType(JNIEnv * env, jobject instance);
void jset_CommConfig_wcProviderData(JNIEnv * env, jobject instance, jbyteArray value);
jboolean jsetA_CommConfig_wcProviderData(JNIEnv * env, jobject instance, jbyte * value, jsize len);
jbyteArray jget_CommConfig_wcProviderData(JNIEnv * env, jobject instance);
jobject jnew_CommConfig(JNIEnv * env);
jobject jcall_CommConfig_getDcb(JNIEnv * env, jobject instance);
jlong jcall_CommConfig_getDwProviderSubType(JNIEnv * env, jobject instance);
jlong jcall_CommConfig_getDwSize(JNIEnv * env, jobject instance);
jbyteArray jcall_CommConfig_getWcProviderData(JNIEnv * env, jobject instance);
jint jcall_CommConfig_getwVersion(JNIEnv * env, jobject instance);
void jcall_CommConfig_setDcb(JNIEnv * env, jobject instance, jobject p0);
void jcall_CommConfig_setDwProviderSubType(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommConfig_setDwSize(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommConfig_setWcProviderData(JNIEnv * env, jobject instance, jbyteArray p0);
void jcall_CommConfig_setwVersion(JNIEnv * env, jobject instance, jint p0);
void jset_CommProp_wPacketLength(JNIEnv * env, jobject instance, jint value);
jint jget_CommProp_wPacketLength(JNIEnv * env, jobject instance);
void jset_CommProp_wPacketVersion(JNIEnv * env, jobject instance, jint value);
jint jget_CommProp_wPacketVersion(JNIEnv * env, jobject instance);
void jset_CommProp_dwServiceMask(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwServiceMask(JNIEnv * env, jobject instance);
void jset_CommProp_dwReserved1(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwReserved1(JNIEnv * env, jobject instance);
void jset_CommProp_dwMaxTxQueue(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwMaxTxQueue(JNIEnv * env, jobject instance);
void jset_CommProp_dwMaxRxQueue(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwMaxRxQueue(JNIEnv * env, jobject instance);
void jset_CommProp_dwMaxBaud(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwMaxBaud(JNIEnv * env, jobject instance);
void jset_CommProp_dwProvSubType(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwProvSubType(JNIEnv * env, jobject instance);
void jset_CommProp_dwProvCapabilities(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwProvCapabilities(JNIEnv * env, jobject instance);
void jset_CommProp_dwSettableParams(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwSettableParams(JNIEnv * env, jobject instance);
void jset_CommProp_dwSettableBaud(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwSettableBaud(JNIEnv * env, jobject instance);
void jset_CommProp_wSettableData(JNIEnv * env, jobject instance, jint value);
jint jget_CommProp_wSettableData(JNIEnv * env, jobject instance);
void jset_CommProp_wSettableStopParity(JNIEnv * env, jobject instance, jint value);
jint jget_CommProp_wSettableStopParity(JNIEnv * env, jobject instance);
void jset_CommProp_dwCurrentTxQueue(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwCurrentTxQueue(JNIEnv * env, jobject instance);
void jset_CommProp_dwCurrentRxQueue(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwCurrentRxQueue(JNIEnv * env, jobject instance);
void jset_CommProp_dwProvSpec1(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwProvSpec1(JNIEnv * env, jobject instance);
void jset_CommProp_dwProvSpec2(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommProp_dwProvSpec2(JNIEnv * env, jobject instance);
void jset_CommProp_wcProvChar(JNIEnv * env, jobject instance, jcharArray value);
jcharArray jget_CommProp_wcProvChar(JNIEnv * env, jobject instance);
jobject jnew_CommProp(JNIEnv * env);
jlong jcall_CommProp_getDwCurrentRxQueue(JNIEnv * env, jobject instance);
jlong jcall_CommProp_getDwCurrentTxQueue(JNIEnv * env, jobject instance);
jlong jcall_CommProp_getDwMaxBaud(JNIEnv * env, jobject instance);
jlong jcall_CommProp_getDwMaxRxQueue(JNIEnv * env, jobject instance);
jlong jcall_CommProp_getDwMaxTxQueue(JNIEnv * env, jobject instance);
jlong jcall_CommProp_getDwProvCapabilities(JNIEnv * env, jobject instance);
jlong jcall_CommProp_getDwProvSpec1(JNIEnv * env, jobject instance);
jlong jcall_CommProp_getDwProvSpec2(JNIEnv * env, jobject instance);
jlong jcall_CommProp_getDwProvSubType(JNIEnv * env, jobject instance);
jlong jcall_CommProp_getDwReserved1(JNIEnv * env, jobject instance);
jlong jcall_CommProp_getDwServiceMask(JNIEnv * env, jobject instance);
jlong jcall_CommProp_getDwSettableBaud(JNIEnv * env, jobject instance);
jlong jcall_CommProp_getDwSettableParams(JNIEnv * env, jobject instance);
jcharArray jcall_CommProp_getWcProvChar(JNIEnv * env, jobject instance);
jint jcall_CommProp_getwPacketLength(JNIEnv * env, jobject instance);
jint jcall_CommProp_getwPacketVersion(JNIEnv * env, jobject instance);
jint jcall_CommProp_getwSettableData(JNIEnv * env, jobject instance);
jint jcall_CommProp_getwSettableStopParity(JNIEnv * env, jobject instance);
void jcall_CommProp_setDwCurrentRxQueue(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setDwCurrentTxQueue(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setDwMaxBaud(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setDwMaxRxQueue(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setDwMaxTxQueue(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setDwProvCapabilities(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setDwProvSpec1(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setDwProvSpec2(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setDwProvSubType(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setDwReserved1(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setDwServiceMask(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setDwSettableBaud(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setDwSettableParams(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommProp_setWcProvChar(JNIEnv * env, jobject instance, jcharArray p0);
void jcall_CommProp_setwPacketLength(JNIEnv * env, jobject instance, jint p0);
void jcall_CommProp_setwPacketVersion(JNIEnv * env, jobject instance, jint p0);
void jcall_CommProp_setwSettableData(JNIEnv * env, jobject instance, jint p0);
void jcall_CommProp_setwSettableStopParity(JNIEnv * env, jobject instance, jint p0);
void jset_CommTimeouts_ReadIntervalTimeout(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommTimeouts_ReadIntervalTimeout(JNIEnv * env, jobject instance);
void jset_CommTimeouts_ReadTotalTimeoutMultiplier(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommTimeouts_ReadTotalTimeoutMultiplier(JNIEnv * env, jobject instance);
void jset_CommTimeouts_ReadTotalTimeoutConstant(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommTimeouts_ReadTotalTimeoutConstant(JNIEnv * env, jobject instance);
void jset_CommTimeouts_WriteTotalTimeoutMultiplier(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommTimeouts_WriteTotalTimeoutMultiplier(JNIEnv * env, jobject instance);
void jset_CommTimeouts_WriteTotalTimeoutConstant(JNIEnv * env, jobject instance, jlong value);
jlong jget_CommTimeouts_WriteTotalTimeoutConstant(JNIEnv * env, jobject instance);
jobject jnew_CommTimeouts(JNIEnv * env);
jlong jcall_CommTimeouts_getReadIntervalTimeout(JNIEnv * env, jobject instance);
jlong jcall_CommTimeouts_getReadTotalTimeoutConstant(JNIEnv * env, jobject instance);
jlong jcall_CommTimeouts_getReadTotalTimeoutMultiplier(JNIEnv * env, jobject instance);
jlong jcall_CommTimeouts_getWriteTotalTimeoutConstant(JNIEnv * env, jobject instance);
jlong jcall_CommTimeouts_getWriteTotalTimeoutMultiplier(JNIEnv * env, jobject instance);
void jcall_CommTimeouts_setReadIntervalTimeout(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommTimeouts_setReadTotalTimeoutConstant(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommTimeouts_setReadTotalTimeoutMultiplier(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommTimeouts_setWriteTotalTimeoutConstant(JNIEnv * env, jobject instance, jlong p0);
void jcall_CommTimeouts_setWriteTotalTimeoutMultiplier(JNIEnv * env, jobject instance, jlong p0);
jstring jcall_CommTimeouts_toString(JNIEnv * env, jobject instance);
void jset_DCB_BaudRate(JNIEnv * env, jobject instance, jlong value);
jlong jget_DCB_BaudRate(JNIEnv * env, jobject instance);
void jset_DCB_fBinary(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_DCB_fBinary(JNIEnv * env, jobject instance);
void jset_DCB_fParity(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_DCB_fParity(JNIEnv * env, jobject instance);
void jset_DCB_fOutxCtsFlow(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_DCB_fOutxCtsFlow(JNIEnv * env, jobject instance);
void jset_DCB_fOutxDsrFlow(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_DCB_fOutxDsrFlow(JNIEnv * env, jobject instance);
void jset_DCB_fDtrControl(JNIEnv * env, jobject instance, jlong value);
jlong jget_DCB_fDtrControl(JNIEnv * env, jobject instance);
void jset_DCB_fDsrSensitivity(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_DCB_fDsrSensitivity(JNIEnv * env, jobject instance);
void jset_DCB_fTXContinueOnXoff(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_DCB_fTXContinueOnXoff(JNIEnv * env, jobject instance);
void jset_DCB_fOutX(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_DCB_fOutX(JNIEnv * env, jobject instance);
void jset_DCB_fInX(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_DCB_fInX(JNIEnv * env, jobject instance);
void jset_DCB_fErrorChar(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_DCB_fErrorChar(JNIEnv * env, jobject instance);
void jset_DCB_fNull(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_DCB_fNull(JNIEnv * env, jobject instance);
void jset_DCB_fRtsControl(JNIEnv * env, jobject instance, jlong value);
jlong jget_DCB_fRtsControl(JNIEnv * env, jobject instance);
void jset_DCB_fAbortOnError(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_DCB_fAbortOnError(JNIEnv * env, jobject instance);
void jset_DCB_XonLim(JNIEnv * env, jobject instance, jint value);
jint jget_DCB_XonLim(JNIEnv * env, jobject instance);
void jset_DCB_XoffLim(JNIEnv * env, jobject instance, jint value);
jint jget_DCB_XoffLim(JNIEnv * env, jobject instance);
void jset_DCB_ByteSize(JNIEnv * env, jobject instance, jint value);
jint jget_DCB_ByteSize(JNIEnv * env, jobject instance);
void jset_DCB_Parity(JNIEnv * env, jobject instance, jint value);
jint jget_DCB_Parity(JNIEnv * env, jobject instance);
void jset_DCB_StopBits(JNIEnv * env, jobject instance, jint value);
jint jget_DCB_StopBits(JNIEnv * env, jobject instance);
void jset_DCB_XonChar(JNIEnv * env, jobject instance, jint value);
jint jget_DCB_XonChar(JNIEnv * env, jobject instance);
void jset_DCB_XoffChar(JNIEnv * env, jobject instance, jint value);
jint jget_DCB_XoffChar(JNIEnv * env, jobject instance);
void jset_DCB_ErrorChar(JNIEnv * env, jobject instance, jint value);
jint jget_DCB_ErrorChar(JNIEnv * env, jobject instance);
void jset_DCB_EofChar(JNIEnv * env, jobject instance, jint value);
jint jget_DCB_EofChar(JNIEnv * env, jobject instance);
void jset_DCB_EvtChar(JNIEnv * env, jobject instance, jint value);
jint jget_DCB_EvtChar(JNIEnv * env, jobject instance);
jobject jnew_DCB(JNIEnv * env);
jlong jcall_DCB_getBaudRate(JNIEnv * env, jobject instance);
jint jcall_DCB_getByteSize(JNIEnv * env, jobject instance);
jint jcall_DCB_getEofChar(JNIEnv * env, jobject instance);
jint jcall_DCB_getErrorChar(JNIEnv * env, jobject instance);
jint jcall_DCB_getEvtChar(JNIEnv * env, jobject instance);
jint jcall_DCB_getParity(JNIEnv * env, jobject instance);
jint jcall_DCB_getStopBits(JNIEnv * env, jobject instance);
jint jcall_DCB_getXoffChar(JNIEnv * env, jobject instance);
jint jcall_DCB_getXoffLim(JNIEnv * env, jobject instance);
jint jcall_DCB_getXonChar(JNIEnv * env, jobject instance);
jint jcall_DCB_getXonLim(JNIEnv * env, jobject instance);
jlong jcall_DCB_getfDtrControl(JNIEnv * env, jobject instance);
jlong jcall_DCB_getfRtsControl(JNIEnv * env, jobject instance);
jboolean jcall_DCB_isfAbortOnError(JNIEnv * env, jobject instance);
jboolean jcall_DCB_isfBinary(JNIEnv * env, jobject instance);
jboolean jcall_DCB_isfDsrSensitivity(JNIEnv * env, jobject instance);
jboolean jcall_DCB_isfErrorChar(JNIEnv * env, jobject instance);
jboolean jcall_DCB_isfInX(JNIEnv * env, jobject instance);
jboolean jcall_DCB_isfNull(JNIEnv * env, jobject instance);
jboolean jcall_DCB_isfOutX(JNIEnv * env, jobject instance);
jboolean jcall_DCB_isfOutxCtsFlow(JNIEnv * env, jobject instance);
jboolean jcall_DCB_isfOutxDsrFlow(JNIEnv * env, jobject instance);
jboolean jcall_DCB_isfParity(JNIEnv * env, jobject instance);
jboolean jcall_DCB_isfTXContinueOnXoff(JNIEnv * env, jobject instance);
void jcall_DCB_setBaudRate(JNIEnv * env, jobject instance, jlong p0);
void jcall_DCB_setByteSize(JNIEnv * env, jobject instance, jint p0);
void jcall_DCB_setEofChar(JNIEnv * env, jobject instance, jint p0);
void jcall_DCB_setErrorChar(JNIEnv * env, jobject instance, jint p0);
void jcall_DCB_setEvtChar(JNIEnv * env, jobject instance, jint p0);
void jcall_DCB_setParity(JNIEnv * env, jobject instance, jint p0);
void jcall_DCB_setStopBits(JNIEnv * env, jobject instance, jint p0);
void jcall_DCB_setXoffChar(JNIEnv * env, jobject instance, jint p0);
void jcall_DCB_setXoffLim(JNIEnv * env, jobject instance, jint p0);
void jcall_DCB_setXonChar(JNIEnv * env, jobject instance, jint p0);
void jcall_DCB_setXonLim(JNIEnv * env, jobject instance, jint p0);
void jcall_DCB_setfAbortOnError(JNIEnv * env, jobject instance, jboolean p0);
void jcall_DCB_setfBinary(JNIEnv * env, jobject instance, jboolean p0);
void jcall_DCB_setfDsrSensitivity(JNIEnv * env, jobject instance, jboolean p0);
void jcall_DCB_setfDtrControl(JNIEnv * env, jobject instance, jlong p0);
void jcall_DCB_setfErrorChar(JNIEnv * env, jobject instance, jboolean p0);
void jcall_DCB_setfInX(JNIEnv * env, jobject instance, jboolean p0);
void jcall_DCB_setfNull(JNIEnv * env, jobject instance, jboolean p0);
void jcall_DCB_setfOutX(JNIEnv * env, jobject instance, jboolean p0);
void jcall_DCB_setfOutxCtsFlow(JNIEnv * env, jobject instance, jboolean p0);
void jcall_DCB_setfOutxDsrFlow(JNIEnv * env, jobject instance, jboolean p0);
void jcall_DCB_setfParity(JNIEnv * env, jobject instance, jboolean p0);
void jcall_DCB_setfRtsControl(JNIEnv * env, jobject instance, jlong p0);
void jcall_DCB_setfTXContinueOnXoff(JNIEnv * env, jobject instance, jboolean p0);
jstring jcall_DCB_toString(JNIEnv * env, jobject instance);
void jset_GUID_data1(JNIEnv * env, jobject instance, jint value);
jint jget_GUID_data1(JNIEnv * env, jobject instance);
void jset_GUID_data2(JNIEnv * env, jobject instance, jshort value);
jshort jget_GUID_data2(JNIEnv * env, jobject instance);
void jset_GUID_data3(JNIEnv * env, jobject instance, jshort value);
jshort jget_GUID_data3(JNIEnv * env, jobject instance);
void jset_GUID_data4(JNIEnv * env, jobject instance, jbyteArray value);
jboolean jsetA_GUID_data4(JNIEnv * env, jobject instance, jbyte * value, jsize len);
jbyteArray jget_GUID_data4(JNIEnv * env, jobject instance);
jobject jnew_GUID(JNIEnv * env);
jobject jnew_GUID_1(JNIEnv * env, jstring p0);
jobject jcall_GUID_clone(JNIEnv * env, jobject instance);
jint jcall_GUID_getData1(JNIEnv * env, jobject instance);
jshort jcall_GUID_getData2(JNIEnv * env, jobject instance);
jshort jcall_GUID_getData3(JNIEnv * env, jobject instance);
jbyteArray jcall_GUID_getData4(JNIEnv * env, jobject instance);
void jcall_GUID_setData1(JNIEnv * env, jobject instance, jint p0);
void jcall_GUID_setData2(JNIEnv * env, jobject instance, jshort p0);
void jcall_GUID_setData3(JNIEnv * env, jobject instance, jshort p0);
void jcall_GUID_setData4(JNIEnv * env, jobject instance, jbyteArray p0);
jstring jcall_GUID_toString(JNIEnv * env, jobject instance);
void jset_Group_gr_gid(JNIEnv * env, jobject instance, jint value);
jint jget_Group_gr_gid(JNIEnv * env, jobject instance);
void jset_Group_gr_name(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_Group_gr_name(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_Group_gr_name(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_Group_gr_name(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_Group_gr_name(JNIEnv * env, jobject instance);
void jset_Group_gr_passwd(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_Group_gr_passwd(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_Group_gr_passwd(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_Group_gr_passwd(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_Group_gr_passwd(JNIEnv * env, jobject instance);
void jset_Group_gr_mem(JNIEnv * env, jobject instance, jobject value);
jobject jget_Group_gr_mem(JNIEnv * env, jobject instance);
jobject jnew_Group(JNIEnv * env);
jboolean jcall_Group_equals(JNIEnv * env, jobject instance, jobject p0);
jint jcall_Group_getGr_gid(JNIEnv * env, jobject instance);
jobject jcall_Group_getGr_mem(JNIEnv * env, jobject instance);
jstring jcall_Group_getGr_name(JNIEnv * env, jobject instance);
jstring jcall_Group_getGr_passwd(JNIEnv * env, jobject instance);
jint jcall_Group_hashCode(JNIEnv * env, jobject instance);
void jcall_Group_setGr_gid(JNIEnv * env, jobject instance, jint p0);
void jcall_Group_setGr_mem(JNIEnv * env, jobject instance, jobject p0);
void jcall_Group_setGr_name(JNIEnv * env, jobject instance, jstring p0);
void jcall_Group_setGr_passwd(JNIEnv * env, jobject instance, jstring p0);
jstring jcall_Group_toString(JNIEnv * env, jobject instance);
void jset_IfNameIndex_index(JNIEnv * env, jobject instance, jint value);
jint jget_IfNameIndex_index(JNIEnv * env, jobject instance);
void jset_IfNameIndex_name(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_IfNameIndex_name(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_IfNameIndex_name(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_IfNameIndex_name(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_IfNameIndex_name(JNIEnv * env, jobject instance);
jobject jnew_IfNameIndex(JNIEnv * env, jint p0, jstring p1);
jboolean jcall_IfNameIndex_equals(JNIEnv * env, jobject instance, jobject p0);
jint jcall_IfNameIndex_getIndex(JNIEnv * env, jobject instance);
jstring jcall_IfNameIndex_getName(JNIEnv * env, jobject instance);
jint jcall_IfNameIndex_hashCode(JNIEnv * env, jobject instance);
void jset_Iovec_payload(JNIEnv * env, jobject instance, jbyteArray value);
jboolean jsetA_Iovec_payload(JNIEnv * env, jobject instance, jbyte * value, jsize len);
jbyteArray jget_Iovec_payload(JNIEnv * env, jobject instance);
void jset_Iovec_off(JNIEnv * env, jobject instance, jint value);
jint jget_Iovec_off(JNIEnv * env, jobject instance);
void jset_Iovec_len(JNIEnv * env, jobject instance, jint value);
jint jget_Iovec_len(JNIEnv * env, jobject instance);
void jset_Iovec_size(JNIEnv * env, jobject instance, jint value);
jint jget_Iovec_size(JNIEnv * env, jobject instance);
jobject jnew_Iovec(JNIEnv * env, jint p0);
jobject jnew_Iovec_1(JNIEnv * env, jbyteArray p0);
jobject jnew_Iovec_2(JNIEnv * env, jbyteArray p0, jint p1, jint p2);
jint jcall_Iovec_getLen(JNIEnv * env, jobject instance);
jint jcall_Iovec_getOff(JNIEnv * env, jobject instance);
jbyteArray jcall_Iovec_getPayload(JNIEnv * env, jobject instance);
jint jcall_Iovec_getSize(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_AdapterName(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_IpAdapterAddresses_AdapterName(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_IpAdapterAddresses_AdapterName(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_IpAdapterAddresses_AdapterName(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_IpAdapterAddresses_AdapterName(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_UnicastAddress(JNIEnv * env, jobject instance, jobject value);
jobject jget_IpAdapterAddresses_UnicastAddress(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_AnycastAddress(JNIEnv * env, jobject instance, jobject value);
jobject jget_IpAdapterAddresses_AnycastAddress(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_MulticastAddress(JNIEnv * env, jobject instance, jobject value);
jobject jget_IpAdapterAddresses_MulticastAddress(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_DnsServerAddress(JNIEnv * env, jobject instance, jobject value);
jobject jget_IpAdapterAddresses_DnsServerAddress(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_DnsSuffix(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_IpAdapterAddresses_DnsSuffix(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_IpAdapterAddresses_DnsSuffix(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_IpAdapterAddresses_DnsSuffix(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_IpAdapterAddresses_DnsSuffix(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Description(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_IpAdapterAddresses_Description(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_IpAdapterAddresses_Description(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_IpAdapterAddresses_Description(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_IpAdapterAddresses_Description(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_FriendlyName(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_IpAdapterAddresses_FriendlyName(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_IpAdapterAddresses_FriendlyName(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_IpAdapterAddresses_FriendlyName(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_IpAdapterAddresses_FriendlyName(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_PhysicalAddress(JNIEnv * env, jobject instance, jbyteArray value);
jboolean jsetA_IpAdapterAddresses_PhysicalAddress(JNIEnv * env, jobject instance, jbyte * value, jsize len);
jbyteArray jget_IpAdapterAddresses_PhysicalAddress(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Mtu(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses_Mtu(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_IfType(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses_IfType(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_OperStatus(JNIEnv * env, jobject instance, jint value);
jint jget_IpAdapterAddresses_OperStatus(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Ipv6IfIndex(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses_Ipv6IfIndex(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_ZoneIndices(JNIEnv * env, jobject instance, jlongArray value);
jboolean jsetA_IpAdapterAddresses_ZoneIndices(JNIEnv * env, jobject instance, jlong * value, jsize len);
jlongArray jget_IpAdapterAddresses_ZoneIndices(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Prefix(JNIEnv * env, jobject instance, jobject value);
jobject jget_IpAdapterAddresses_Prefix(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_TransmitLinkSpeed(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses_TransmitLinkSpeed(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_ReceiveLinkSpeed(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses_ReceiveLinkSpeed(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_WinsServerAddress(JNIEnv * env, jobject instance, jobject value);
jobject jget_IpAdapterAddresses_WinsServerAddress(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_GatewayAddress(JNIEnv * env, jobject instance, jobject value);
jobject jget_IpAdapterAddresses_GatewayAddress(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Ipv4Metric(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses_Ipv4Metric(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Ipv6Metric(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses_Ipv6Metric(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Luid_Value(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses_Luid_Value(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Luid_NetLuidIndex(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses_Luid_NetLuidIndex(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Luid_IfType(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses_Luid_IfType(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Dhcpv4Server(JNIEnv * env, jobject instance, jobject value);
jobject jget_IpAdapterAddresses_Dhcpv4Server(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_CompartmentId(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses_CompartmentId(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_NetworkGuid(JNIEnv * env, jobject instance, jobject value);
jobject jget_IpAdapterAddresses_NetworkGuid(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_ConnectionType(JNIEnv * env, jobject instance, jint value);
jint jget_IpAdapterAddresses_ConnectionType(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_TunnelType(JNIEnv * env, jobject instance, jint value);
jint jget_IpAdapterAddresses_TunnelType(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Dhcpv6Server(JNIEnv * env, jobject instance, jobject value);
jobject jget_IpAdapterAddresses_Dhcpv6Server(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Dhcpv6ClientDuid(JNIEnv * env, jobject instance, jbyteArray value);
jboolean jsetA_IpAdapterAddresses_Dhcpv6ClientDuid(JNIEnv * env, jobject instance, jbyte * value, jsize len);
jbyteArray jget_IpAdapterAddresses_Dhcpv6ClientDuid(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses_Dhcpv6Iaid(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses_Dhcpv6Iaid(JNIEnv * env, jobject instance);
jobject jnew_IpAdapterAddresses(JNIEnv * env);
jstring jcall_IpAdapterAddresses_getAdapterName(JNIEnv * env, jobject instance);
jobject jcall_IpAdapterAddresses_getAnycastAddress(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses_getCompartmentId(JNIEnv * env, jobject instance);
jint jcall_IpAdapterAddresses_getConnectionType(JNIEnv * env, jobject instance);
jstring jcall_IpAdapterAddresses_getDescription(JNIEnv * env, jobject instance);
jobject jcall_IpAdapterAddresses_getDhcpv4Server(JNIEnv * env, jobject instance);
jbyteArray jcall_IpAdapterAddresses_getDhcpv6ClientDuid(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses_getDhcpv6Iaid(JNIEnv * env, jobject instance);
jobject jcall_IpAdapterAddresses_getDhcpv6Server(JNIEnv * env, jobject instance);
jobject jcall_IpAdapterAddresses_getDnsServerAddress(JNIEnv * env, jobject instance);
jstring jcall_IpAdapterAddresses_getDnsSuffix(JNIEnv * env, jobject instance);
jstring jcall_IpAdapterAddresses_getFriendlyName(JNIEnv * env, jobject instance);
jobject jcall_IpAdapterAddresses_getGatewayAddress(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses_getIfType(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses_getIpv4Metric(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses_getIpv6IfIndex(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses_getIpv6Metric(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses_getLuid_IfType(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses_getLuid_NetLuidIndex(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses_getLuid_Value(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses_getMtu(JNIEnv * env, jobject instance);
jobject jcall_IpAdapterAddresses_getMulticastAddress(JNIEnv * env, jobject instance);
jobject jcall_IpAdapterAddresses_getNetworkGuid(JNIEnv * env, jobject instance);
jint jcall_IpAdapterAddresses_getOperStatus(JNIEnv * env, jobject instance);
jbyteArray jcall_IpAdapterAddresses_getPhysicalAddress(JNIEnv * env, jobject instance);
jobject jcall_IpAdapterAddresses_getPrefix(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses_getReceiveLinkSpeed(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses_getTransmitLinkSpeed(JNIEnv * env, jobject instance);
jint jcall_IpAdapterAddresses_getTunnelType(JNIEnv * env, jobject instance);
jobject jcall_IpAdapterAddresses_getUnicastAddress(JNIEnv * env, jobject instance);
jobject jcall_IpAdapterAddresses_getWinsServerAddress(JNIEnv * env, jobject instance);
jlongArray jcall_IpAdapterAddresses_getZoneIndices(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses$IpAdapterUnicastAddress_Address(JNIEnv * env, jobject instance, jobject value);
jobject jget_IpAdapterAddresses$IpAdapterUnicastAddress_Address(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses$IpAdapterUnicastAddress_PrefixOrigin(JNIEnv * env, jobject instance, jint value);
jint jget_IpAdapterAddresses$IpAdapterUnicastAddress_PrefixOrigin(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses$IpAdapterUnicastAddress_SuffixOrigin(JNIEnv * env, jobject instance, jint value);
jint jget_IpAdapterAddresses$IpAdapterUnicastAddress_SuffixOrigin(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses$IpAdapterUnicastAddress_DadState(JNIEnv * env, jobject instance, jint value);
jint jget_IpAdapterAddresses$IpAdapterUnicastAddress_DadState(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses$IpAdapterUnicastAddress_ValidLifetime(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses$IpAdapterUnicastAddress_ValidLifetime(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses$IpAdapterUnicastAddress_PreferredLifetime(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses$IpAdapterUnicastAddress_PreferredLifetime(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses$IpAdapterUnicastAddress_LeaseLifetime(JNIEnv * env, jobject instance, jlong value);
jlong jget_IpAdapterAddresses$IpAdapterUnicastAddress_LeaseLifetime(JNIEnv * env, jobject instance);
void jset_IpAdapterAddresses$IpAdapterUnicastAddress_OnLinkPrefixLength(JNIEnv * env, jobject instance, jint value);
jint jget_IpAdapterAddresses$IpAdapterUnicastAddress_OnLinkPrefixLength(JNIEnv * env, jobject instance);
jobject jnew_IpAdapterAddresses$IpAdapterUnicastAddress(JNIEnv * env);
jobject jcall_IpAdapterAddresses$IpAdapterUnicastAddress_getAddress(JNIEnv * env, jobject instance);
jint jcall_IpAdapterAddresses$IpAdapterUnicastAddress_getDadState(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses$IpAdapterUnicastAddress_getLeaseLifetime(JNIEnv * env, jobject instance);
jint jcall_IpAdapterAddresses$IpAdapterUnicastAddress_getOnLinkPrefixLength(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses$IpAdapterUnicastAddress_getPreferredLifetime(JNIEnv * env, jobject instance);
jint jcall_IpAdapterAddresses$IpAdapterUnicastAddress_getPrefixOrigin(JNIEnv * env, jobject instance);
jint jcall_IpAdapterAddresses$IpAdapterUnicastAddress_getSuffixOrigin(JNIEnv * env, jobject instance);
jlong jcall_IpAdapterAddresses$IpAdapterUnicastAddress_getValidLifetime(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_InterfaceLuid(JNIEnv * env, jobject instance, jlong value);
jlong jget_MibIpForwardRow2_InterfaceLuid(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_InterfaceIndex(JNIEnv * env, jobject instance, jint value);
jint jget_MibIpForwardRow2_InterfaceIndex(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_DestinationPrefixAddress(JNIEnv * env, jobject instance, jobject value);
jobject jget_MibIpForwardRow2_DestinationPrefixAddress(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_DestinationPrefixLength(JNIEnv * env, jobject instance, jint value);
jint jget_MibIpForwardRow2_DestinationPrefixLength(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_NextHop(JNIEnv * env, jobject instance, jobject value);
jobject jget_MibIpForwardRow2_NextHop(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_SitePrefixLength(JNIEnv * env, jobject instance, jbyte value);
jbyte jget_MibIpForwardRow2_SitePrefixLength(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_ValidLifetime(JNIEnv * env, jobject instance, jlong value);
jlong jget_MibIpForwardRow2_ValidLifetime(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_PreferredLifetime(JNIEnv * env, jobject instance, jlong value);
jlong jget_MibIpForwardRow2_PreferredLifetime(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_Metric(JNIEnv * env, jobject instance, jlong value);
jlong jget_MibIpForwardRow2_Metric(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_Protocol(JNIEnv * env, jobject instance, jlong value);
jlong jget_MibIpForwardRow2_Protocol(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_Loopback(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_MibIpForwardRow2_Loopback(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_AutoconfigureAddress(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_MibIpForwardRow2_AutoconfigureAddress(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_Publish(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_MibIpForwardRow2_Publish(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_Immortal(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_MibIpForwardRow2_Immortal(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_Age(JNIEnv * env, jobject instance, jlong value);
jlong jget_MibIpForwardRow2_Age(JNIEnv * env, jobject instance);
void jset_MibIpForwardRow2_Origin(JNIEnv * env, jobject instance, jlong value);
jlong jget_MibIpForwardRow2_Origin(JNIEnv * env, jobject instance);
jobject jnew_MibIpForwardRow2(JNIEnv * env);
jlong jcall_MibIpForwardRow2_getAge(JNIEnv * env, jobject instance);
jobject jcall_MibIpForwardRow2_getDestinationPrefixAddress(JNIEnv * env, jobject instance);
jint jcall_MibIpForwardRow2_getDestinationPrefixLength(JNIEnv * env, jobject instance);
jint jcall_MibIpForwardRow2_getInterfaceIndex(JNIEnv * env, jobject instance);
jlong jcall_MibIpForwardRow2_getInterfaceLuid(JNIEnv * env, jobject instance);
jlong jcall_MibIpForwardRow2_getMetric(JNIEnv * env, jobject instance);
jobject jcall_MibIpForwardRow2_getNextHop(JNIEnv * env, jobject instance);
jlong jcall_MibIpForwardRow2_getOrigin(JNIEnv * env, jobject instance);
jlong jcall_MibIpForwardRow2_getPreferredLifetime(JNIEnv * env, jobject instance);
jlong jcall_MibIpForwardRow2_getProtocol(JNIEnv * env, jobject instance);
jbyte jcall_MibIpForwardRow2_getSitePrefixLength(JNIEnv * env, jobject instance);
jlong jcall_MibIpForwardRow2_getValidLifetime(JNIEnv * env, jobject instance);
jboolean jcall_MibIpForwardRow2_isAutoconfigureAddress(JNIEnv * env, jobject instance);
jboolean jcall_MibIpForwardRow2_isImmortal(JNIEnv * env, jobject instance);
jboolean jcall_MibIpForwardRow2_isLoopback(JNIEnv * env, jobject instance);
jboolean jcall_MibIpForwardRow2_isPublish(JNIEnv * env, jobject instance);
void jcall_MibIpForwardRow2_setAge(JNIEnv * env, jobject instance, jlong p0);
void jcall_MibIpForwardRow2_setAutoconfigureAddress(JNIEnv * env, jobject instance, jboolean p0);
void jcall_MibIpForwardRow2_setDestinationPrefixAddress(JNIEnv * env, jobject instance, jobject p0);
void jcall_MibIpForwardRow2_setDestinationPrefixLength(JNIEnv * env, jobject instance, jint p0);
void jcall_MibIpForwardRow2_setImmortal(JNIEnv * env, jobject instance, jboolean p0);
void jcall_MibIpForwardRow2_setInterfaceIndex(JNIEnv * env, jobject instance, jint p0);
void jcall_MibIpForwardRow2_setInterfaceLuid(JNIEnv * env, jobject instance, jlong p0);
void jcall_MibIpForwardRow2_setLoopback(JNIEnv * env, jobject instance, jboolean p0);
void jcall_MibIpForwardRow2_setMetric(JNIEnv * env, jobject instance, jlong p0);
void jcall_MibIpForwardRow2_setNextHop(JNIEnv * env, jobject instance, jobject p0);
void jcall_MibIpForwardRow2_setOrigin(JNIEnv * env, jobject instance, jlong p0);
void jcall_MibIpForwardRow2_setPreferredLifetime(JNIEnv * env, jobject instance, jlong p0);
void jcall_MibIpForwardRow2_setProtocol(JNIEnv * env, jobject instance, jlong p0);
void jcall_MibIpForwardRow2_setPublish(JNIEnv * env, jobject instance, jboolean p0);
void jcall_MibIpForwardRow2_setSitePrefixLength(JNIEnv * env, jobject instance, jbyte p0);
void jcall_MibIpForwardRow2_setValidLifetime(JNIEnv * env, jobject instance, jlong p0);
jstring jcall_MibIpForwardRow2_toString(JNIEnv * env, jobject instance);
void jset_Msghdr_msg_iov(JNIEnv * env, jobject instance, jobjectArray value);
jobjectArray jget_Msghdr_msg_iov(JNIEnv * env, jobject instance);
void jset_Msghdr_msg_control(JNIEnv * env, jobject instance, jbyteArray value);
jboolean jsetA_Msghdr_msg_control(JNIEnv * env, jobject instance, jbyte * value, jsize len);
jbyteArray jget_Msghdr_msg_control(JNIEnv * env, jobject instance);
void jset_Msghdr_msg_name(JNIEnv * env, jobject instance, jobject value);
jobject jget_Msghdr_msg_name(JNIEnv * env, jobject instance);
void jset_Msghdr_complete(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_Msghdr_complete(JNIEnv * env, jobject instance);
void jset_Msghdr_truncated(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_Msghdr_truncated(JNIEnv * env, jobject instance);
void jset_Msghdr_controlDataTruncated(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_Msghdr_controlDataTruncated(JNIEnv * env, jobject instance);
void jset_Msghdr_outOfBand(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_Msghdr_outOfBand(JNIEnv * env, jobject instance);
void jset_Msghdr_errQueue(JNIEnv * env, jobject instance, jboolean value);
jboolean jget_Msghdr_errQueue(JNIEnv * env, jobject instance);
void jset_Msghdr_msg_controllen(JNIEnv * env, jobject instance, jint value);
jint jget_Msghdr_msg_controllen(JNIEnv * env, jobject instance);
jobject jnew_Msghdr(JNIEnv * env, jobject p0);
jobject jnew_Msghdr_1(JNIEnv * env, jobject p0, jobject p1, jbyteArray p2);
jobject jnew_Msghdr_2(JNIEnv * env, jbyteArray p0, jint p1, jint p2);
jobject jnew_Msghdr_3(JNIEnv * env, jobjectArray p0);
jobject jnew_Msghdr_4(JNIEnv * env, jobjectArray p0, jobject p1);
jobject jnew_Msghdr_5(JNIEnv * env, jobjectArray p0, jobject p1, jbyteArray p2);
jobject jnew_Msghdr_6(JNIEnv * env, jobjectArray p0, jbyteArray p1);
jbyteArray jcall_Msghdr_getMsg_control(JNIEnv * env, jobject instance);
jint jcall_Msghdr_getMsg_controllen(JNIEnv * env, jobject instance);
jobjectArray jcall_Msghdr_getMsg_iov(JNIEnv * env, jobject instance);
jobject jcall_Msghdr_getMsg_name(JNIEnv * env, jobject instance);
jboolean jcall_Msghdr_isComplete(JNIEnv * env, jobject instance);
jboolean jcall_Msghdr_isControlDataTruncated(JNIEnv * env, jobject instance);
jboolean jcall_Msghdr_isErrQueue(JNIEnv * env, jobject instance);
jboolean jcall_Msghdr_isOutOfBand(JNIEnv * env, jobject instance);
jboolean jcall_Msghdr_isTruncated(JNIEnv * env, jobject instance);
void jset_Passwd_pw_name(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_Passwd_pw_name(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_Passwd_pw_name(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_Passwd_pw_name(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_Passwd_pw_name(JNIEnv * env, jobject instance);
void jset_Passwd_pw_passwd(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_Passwd_pw_passwd(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_Passwd_pw_passwd(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_Passwd_pw_passwd(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_Passwd_pw_passwd(JNIEnv * env, jobject instance);
void jset_Passwd_pw_uid(JNIEnv * env, jobject instance, jint value);
jint jget_Passwd_pw_uid(JNIEnv * env, jobject instance);
void jset_Passwd_pw_gid(JNIEnv * env, jobject instance, jint value);
jint jget_Passwd_pw_gid(JNIEnv * env, jobject instance);
void jset_Passwd_pw_gecos(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_Passwd_pw_gecos(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_Passwd_pw_gecos(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_Passwd_pw_gecos(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_Passwd_pw_gecos(JNIEnv * env, jobject instance);
void jset_Passwd_pw_dir(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_Passwd_pw_dir(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_Passwd_pw_dir(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_Passwd_pw_dir(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_Passwd_pw_dir(JNIEnv * env, jobject instance);
void jset_Passwd_pw_shell(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_Passwd_pw_shell(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_Passwd_pw_shell(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_Passwd_pw_shell(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_Passwd_pw_shell(JNIEnv * env, jobject instance);
jobject jnew_Passwd(JNIEnv * env);
jboolean jcall_Passwd_equals(JNIEnv * env, jobject instance, jobject p0);
jstring jcall_Passwd_getPw_dir(JNIEnv * env, jobject instance);
jstring jcall_Passwd_getPw_gecos(JNIEnv * env, jobject instance);
jint jcall_Passwd_getPw_gid(JNIEnv * env, jobject instance);
jstring jcall_Passwd_getPw_name(JNIEnv * env, jobject instance);
jstring jcall_Passwd_getPw_passwd(JNIEnv * env, jobject instance);
jstring jcall_Passwd_getPw_shell(JNIEnv * env, jobject instance);
jint jcall_Passwd_getPw_uid(JNIEnv * env, jobject instance);
jint jcall_Passwd_hashCode(JNIEnv * env, jobject instance);
void jcall_Passwd_setPw_dir(JNIEnv * env, jobject instance, jstring p0);
void jcall_Passwd_setPw_gecos(JNIEnv * env, jobject instance, jstring p0);
void jcall_Passwd_setPw_gid(JNIEnv * env, jobject instance, jint p0);
void jcall_Passwd_setPw_name(JNIEnv * env, jobject instance, jstring p0);
void jcall_Passwd_setPw_passwd(JNIEnv * env, jobject instance, jstring p0);
void jcall_Passwd_setPw_shell(JNIEnv * env, jobject instance, jstring p0);
void jcall_Passwd_setPw_uid(JNIEnv * env, jobject instance, jint p0);
jstring jcall_Passwd_toString(JNIEnv * env, jobject instance);
void jset_PollFD_fd(JNIEnv * env, jobject instance, jint value);
jint jget_PollFD_fd(JNIEnv * env, jobject instance);
void jset_PollFD_events(JNIEnv * env, jobject instance, jobject value);
jobject jget_PollFD_events(JNIEnv * env, jobject instance);
void jset_PollFD_revents(JNIEnv * env, jobject instance, jobject value);
jobject jget_PollFD_revents(JNIEnv * env, jobject instance);
jobject jnew_PollFD(JNIEnv * env, jint p0, jobject p1);
jobject jcall_PollFD_getEvents(JNIEnv * env, jobject instance);
jint jcall_PollFD_getFd(JNIEnv * env, jobject instance);
jobject jcall_PollFD_getREvents(JNIEnv * env, jobject instance);
jboolean jcall_PollFD_test(JNIEnv * env, jobject instance, jobject p0);
jobject jenum_PollFD$PollEvent_POLLIN();
jobject jenum_PollFD$PollEvent_POLLPRI();
jobject jenum_PollFD$PollEvent_POLLOUT();
jobject jenum_PollFD$PollEvent_POLLRDNORM();
jobject jenum_PollFD$PollEvent_POLLRDBAND();
jobject jenum_PollFD$PollEvent_POLLWRNORM();
jobject jenum_PollFD$PollEvent_POLLWRBAND();
jobject jenum_PollFD$PollEvent_POLLMSG();
jobject jenum_PollFD$PollEvent_POLLREMOVE();
jobject jenum_PollFD$PollEvent_POLLRDHUP();
jobject jenum_PollFD$PollEvent_POLLERR();
jobject jenum_PollFD$PollEvent_POLLHUP();
jobject jenum_PollFD$PollEvent_POLLNVAL();
void jset_PollFD$PollEvent_$VALUES(JNIEnv * env, jobjectArray value);
jobjectArray jget_PollFD$PollEvent_$VALUES(JNIEnv * env);
jsize jenum_PollFD$PollEvent_count();
jobject* jenum_PollFD$PollEvent_values();
jobject jnew_PollFD$PollEvent(JNIEnv * env, jstring p0, jint p1);
void jset_RegData_type(JNIEnv * env, jobject instance, jobject value);
jobject jget_RegData_type(JNIEnv * env, jobject instance);
void jset_RegData_value(JNIEnv * env, jobject instance, jobject value);
jobject jget_RegData_value(JNIEnv * env, jobject instance);
jobject jnew_RegData(JNIEnv * env, jint p0);
jobject jnew_RegData_1(JNIEnv * env, jlong p0);
jobject jnew_RegData_2(JNIEnv * env, jobject p0, jobject p1);
jint jcall_RegData_asInt(JNIEnv * env, jobject instance);
jlong jcall_RegData_asLong(JNIEnv * env, jobject instance);
jbyteArray jcall_RegData_binary(JNIEnv * env, jobject instance);
jobject jcall_RegData_number(JNIEnv * env, jobject instance);
jstring jcall_RegData_string(JNIEnv * env, jobject instance);
jobjectArray jcall_RegData_strings(JNIEnv * env, jobject instance);
jstring jcall_RegData_toString(JNIEnv * env, jobject instance);
jobject jcall_RegData_type(JNIEnv * env, jobject instance);
jobject jcall_RegData_value(JNIEnv * env, jobject instance);
jobject jenum_RegData$RegType_REG_BINARY();
jobject jenum_RegData$RegType_REG_DWORD();
jobject jenum_RegData$RegType_REG_EXPAND_SZ();
jobject jenum_RegData$RegType_REG_LINK();
jobject jenum_RegData$RegType_REG_MULTI_SZ();
jobject jenum_RegData$RegType_REG_NONE();
jobject jenum_RegData$RegType_REG_QWORD();
jobject jenum_RegData$RegType_REG_SZ();
void jset_RegData$RegType_$VALUES(JNIEnv * env, jobjectArray value);
jobjectArray jget_RegData$RegType_$VALUES(JNIEnv * env);
jsize jenum_RegData$RegType_count();
jobject* jenum_RegData$RegType_values();
jobject jnew_RegData$RegType(JNIEnv * env, jstring p0, jint p1);
void jset_RegEnumKeyExResult_name(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_RegEnumKeyExResult_name(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_RegEnumKeyExResult_name(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_RegEnumKeyExResult_name(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_RegEnumKeyExResult_name(JNIEnv * env, jobject instance);
void jset_RegEnumKeyExResult_className(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_RegEnumKeyExResult_className(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_RegEnumKeyExResult_className(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_RegEnumKeyExResult_className(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_RegEnumKeyExResult_className(JNIEnv * env, jobject instance);
void jset_RegEnumKeyExResult_lastWriteTime(JNIEnv * env, jobject instance, jlong value);
jlong jget_RegEnumKeyExResult_lastWriteTime(JNIEnv * env, jobject instance);
jobject jnew_RegEnumKeyExResult(JNIEnv * env);
jboolean jcall_RegEnumKeyExResult_equals(JNIEnv * env, jobject instance, jobject p0);
jstring jcall_RegEnumKeyExResult_getClassName(JNIEnv * env, jobject instance);
jlong jcall_RegEnumKeyExResult_getLastWriteTime(JNIEnv * env, jobject instance);
jstring jcall_RegEnumKeyExResult_getName(JNIEnv * env, jobject instance);
jint jcall_RegEnumKeyExResult_hashCode(JNIEnv * env, jobject instance);
jstring jcall_RegEnumKeyExResult_toString(JNIEnv * env, jobject instance);
void jset_RegQueryInfoKeyResult_keyClass(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_RegQueryInfoKeyResult_keyClass(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_RegQueryInfoKeyResult_keyClass(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_RegQueryInfoKeyResult_keyClass(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_RegQueryInfoKeyResult_keyClass(JNIEnv * env, jobject instance);
void jset_RegQueryInfoKeyResult_subKeys(JNIEnv * env, jobject instance, jint value);
jint jget_RegQueryInfoKeyResult_subKeys(JNIEnv * env, jobject instance);
void jset_RegQueryInfoKeyResult_maxSubKeyLen(JNIEnv * env, jobject instance, jint value);
jint jget_RegQueryInfoKeyResult_maxSubKeyLen(JNIEnv * env, jobject instance);
void jset_RegQueryInfoKeyResult_maxClassLen(JNIEnv * env, jobject instance, jint value);
jint jget_RegQueryInfoKeyResult_maxClassLen(JNIEnv * env, jobject instance);
void jset_RegQueryInfoKeyResult_values(JNIEnv * env, jobject instance, jint value);
jint jget_RegQueryInfoKeyResult_values(JNIEnv * env, jobject instance);
void jset_RegQueryInfoKeyResult_maxValueNameLen(JNIEnv * env, jobject instance, jint value);
jint jget_RegQueryInfoKeyResult_maxValueNameLen(JNIEnv * env, jobject instance);
void jset_RegQueryInfoKeyResult_maxValueLen(JNIEnv * env, jobject instance, jint value);
jint jget_RegQueryInfoKeyResult_maxValueLen(JNIEnv * env, jobject instance);
void jset_RegQueryInfoKeyResult_securityDescriptorSize(JNIEnv * env, jobject instance, jint value);
jint jget_RegQueryInfoKeyResult_securityDescriptorSize(JNIEnv * env, jobject instance);
void jset_RegQueryInfoKeyResult_lastWriteTime(JNIEnv * env, jobject instance, jlong value);
jlong jget_RegQueryInfoKeyResult_lastWriteTime(JNIEnv * env, jobject instance);
jobject jnew_RegQueryInfoKeyResult(JNIEnv * env);
jboolean jcall_RegQueryInfoKeyResult_equals(JNIEnv * env, jobject instance, jobject p0);
jstring jcall_RegQueryInfoKeyResult_getKeyClass(JNIEnv * env, jobject instance);
jlong jcall_RegQueryInfoKeyResult_getLastWriteTime(JNIEnv * env, jobject instance);
jint jcall_RegQueryInfoKeyResult_getMaxClassLen(JNIEnv * env, jobject instance);
jint jcall_RegQueryInfoKeyResult_getMaxSubKeyLen(JNIEnv * env, jobject instance);
jint jcall_RegQueryInfoKeyResult_getMaxValueLen(JNIEnv * env, jobject instance);
jint jcall_RegQueryInfoKeyResult_getMaxValueNameLen(JNIEnv * env, jobject instance);
jint jcall_RegQueryInfoKeyResult_getSecurityDescriptorSize(JNIEnv * env, jobject instance);
jint jcall_RegQueryInfoKeyResult_getSubKeys(JNIEnv * env, jobject instance);
jint jcall_RegQueryInfoKeyResult_getValues(JNIEnv * env, jobject instance);
jint jcall_RegQueryInfoKeyResult_hashCode(JNIEnv * env, jobject instance);
jstring jcall_RegQueryInfoKeyResult_toString(JNIEnv * env, jobject instance);
void jset_Sockaddr_EMPTY(JNIEnv * env, jbyteArray value);
jbyteArray jget_Sockaddr_EMPTY(JNIEnv * env);
void jset_Sockaddr_addressFamily(JNIEnv * env, jobject instance, jint value);
jint jget_Sockaddr_addressFamily(JNIEnv * env, jobject instance);
void jset_Sockaddr_address(JNIEnv * env, jobject instance, jbyteArray value);
jboolean jsetA_Sockaddr_address(JNIEnv * env, jobject instance, jbyte * value, jsize len);
jbyteArray jget_Sockaddr_address(JNIEnv * env, jobject instance);
jobject jnew_Sockaddr(JNIEnv * env);
jobject jnew_Sockaddr_1(JNIEnv * env, jint p0, jbyteArray p1);
jobject jnew_Sockaddr_2(JNIEnv * env, jobject p0);
jobject jcall_Sockaddr_clone(JNIEnv * env, jobject instance);
void jcall_Sockaddr_copyTo(JNIEnv * env, jobject instance, jobject p0);
jboolean jcall_Sockaddr_equals(JNIEnv * env, jobject instance, jobject p0);
jbyteArray jcall_Sockaddr_getAddress(JNIEnv * env, jobject instance);
jint jcall_Sockaddr_getAddressFamily(JNIEnv * env, jobject instance);
jint jcall_Sockaddr_hashCode(JNIEnv * env, jobject instance);
jobject jcall_Sockaddr_parseWin32_SOCKADDR_INET(JNIEnv * env, jobject instance);
jstring jcall_Sockaddr_toString(JNIEnv * env, jobject instance);
void jset_SpDeviceInfoData_cbSize(JNIEnv * env, jobject instance, jint value);
jint jget_SpDeviceInfoData_cbSize(JNIEnv * env, jobject instance);
void jset_SpDeviceInfoData_InterfaceClassGuid(JNIEnv * env, jobject instance, jobject value);
jobject jget_SpDeviceInfoData_InterfaceClassGuid(JNIEnv * env, jobject instance);
void jset_SpDeviceInfoData_DevInst(JNIEnv * env, jobject instance, jint value);
jint jget_SpDeviceInfoData_DevInst(JNIEnv * env, jobject instance);
void jset_SpDeviceInfoData_ptr(JNIEnv * env, jobject instance, jlong value);
jlong jget_SpDeviceInfoData_ptr(JNIEnv * env, jobject instance);
jobject jnew_SpDeviceInfoData(JNIEnv * env);
jobject jnew_SpDeviceInfoData_1(JNIEnv * env, jint p0, jobject p1, jint p2, jlong p3);
jint jcall_SpDeviceInfoData_getCbSize(JNIEnv * env, jobject instance);
jint jcall_SpDeviceInfoData_getDevInst(JNIEnv * env, jobject instance);
jobject jcall_SpDeviceInfoData_getInterfaceClassGuid(JNIEnv * env, jobject instance);
jlong jcall_SpDeviceInfoData_getPtr(JNIEnv * env, jobject instance);
jstring jcall_SpDeviceInfoData_toString(JNIEnv * env, jobject instance);
void jset_SpDeviceInterfaceData_cbSize(JNIEnv * env, jobject instance, jint value);
jint jget_SpDeviceInterfaceData_cbSize(JNIEnv * env, jobject instance);
void jset_SpDeviceInterfaceData_InterfaceClassGuid(JNIEnv * env, jobject instance, jobject value);
jobject jget_SpDeviceInterfaceData_InterfaceClassGuid(JNIEnv * env, jobject instance);
void jset_SpDeviceInterfaceData_flags(JNIEnv * env, jobject instance, jint value);
jint jget_SpDeviceInterfaceData_flags(JNIEnv * env, jobject instance);
void jset_SpDeviceInterfaceData_ptr(JNIEnv * env, jobject instance, jlong value);
jlong jget_SpDeviceInterfaceData_ptr(JNIEnv * env, jobject instance);
jobject jnew_SpDeviceInterfaceData(JNIEnv * env);
jobject jnew_SpDeviceInterfaceData_1(JNIEnv * env, jint p0, jobject p1, jint p2);
jint jcall_SpDeviceInterfaceData_getCbSize(JNIEnv * env, jobject instance);
jint jcall_SpDeviceInterfaceData_getFlags(JNIEnv * env, jobject instance);
jobject jcall_SpDeviceInterfaceData_getInterfaceClassGuid(JNIEnv * env, jobject instance);
jlong jcall_SpDeviceInterfaceData_getPtr(JNIEnv * env, jobject instance);
jstring jcall_SpDeviceInterfaceData_toString(JNIEnv * env, jobject instance);
void jset_Stat_dev(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_dev(JNIEnv * env, jobject instance);
void jset_Stat_ino(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_ino(JNIEnv * env, jobject instance);
void jset_Stat_mode(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_mode(JNIEnv * env, jobject instance);
void jset_Stat_nlink(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_nlink(JNIEnv * env, jobject instance);
void jset_Stat_uid(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_uid(JNIEnv * env, jobject instance);
void jset_Stat_gid(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_gid(JNIEnv * env, jobject instance);
void jset_Stat_rdev(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_rdev(JNIEnv * env, jobject instance);
void jset_Stat_size(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_size(JNIEnv * env, jobject instance);
void jset_Stat_blksize(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_blksize(JNIEnv * env, jobject instance);
void jset_Stat_blocks(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_blocks(JNIEnv * env, jobject instance);
void jset_Stat_atime(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_atime(JNIEnv * env, jobject instance);
void jset_Stat_mtime(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_mtime(JNIEnv * env, jobject instance);
void jset_Stat_ctime(JNIEnv * env, jobject instance, jlong value);
jlong jget_Stat_ctime(JNIEnv * env, jobject instance);
void jset_Stat_OR(JNIEnv * env, jint value);
jint jget_Stat_OR(JNIEnv * env);
void jset_Stat_OW(JNIEnv * env, jint value);
jint jget_Stat_OW(JNIEnv * env);
void jset_Stat_OE(JNIEnv * env, jint value);
jint jget_Stat_OE(JNIEnv * env);
void jset_Stat_GR(JNIEnv * env, jint value);
jint jget_Stat_GR(JNIEnv * env);
void jset_Stat_GW(JNIEnv * env, jint value);
jint jget_Stat_GW(JNIEnv * env);
void jset_Stat_GE(JNIEnv * env, jint value);
jint jget_Stat_GE(JNIEnv * env);
void jset_Stat_ER(JNIEnv * env, jint value);
jint jget_Stat_ER(JNIEnv * env);
void jset_Stat_EW(JNIEnv * env, jint value);
jint jget_Stat_EW(JNIEnv * env);
void jset_Stat_EE(JNIEnv * env, jint value);
jint jget_Stat_EE(JNIEnv * env);
jobject jnew_Stat(JNIEnv * env);
jboolean jcall_Stat_canGroupExecute(JNIEnv * env, jobject instance);
jboolean jcall_Stat_canGroupRead(JNIEnv * env, jobject instance);
jboolean jcall_Stat_canGroupWrite(JNIEnv * env, jobject instance);
jboolean jcall_Stat_canOthersExecute(JNIEnv * env, jobject instance);
jboolean jcall_Stat_canOthersRead(JNIEnv * env, jobject instance);
jboolean jcall_Stat_canOthersWrite(JNIEnv * env, jobject instance);
jboolean jcall_Stat_canOwnerExecute(JNIEnv * env, jobject instance);
jboolean jcall_Stat_canOwnerRead(JNIEnv * env, jobject instance);
jboolean jcall_Stat_canOwnerWrite(JNIEnv * env, jobject instance);
jlong jcall_Stat_getAtime(JNIEnv * env, jobject instance);
jlong jcall_Stat_getBlksize(JNIEnv * env, jobject instance);
jlong jcall_Stat_getBlocks(JNIEnv * env, jobject instance);
jlong jcall_Stat_getCtime(JNIEnv * env, jobject instance);
jlong jcall_Stat_getDev(JNIEnv * env, jobject instance);
jlong jcall_Stat_getGid(JNIEnv * env, jobject instance);
jlong jcall_Stat_getIno(JNIEnv * env, jobject instance);
jlong jcall_Stat_getMode(JNIEnv * env, jobject instance);
jlong jcall_Stat_getMtime(JNIEnv * env, jobject instance);
jlong jcall_Stat_getNlink(JNIEnv * env, jobject instance);
jstring jcall_Stat_getPermissions(JNIEnv * env, jobject instance);
jlong jcall_Stat_getRdev(JNIEnv * env, jobject instance);
jlong jcall_Stat_getSize(JNIEnv * env, jobject instance);
jlong jcall_Stat_getUid(JNIEnv * env, jobject instance);
jboolean jcall_Stat_isBlockDevice(JNIEnv * env, jobject instance);
jboolean jcall_Stat_isCharacterDevice(JNIEnv * env, jobject instance);
jboolean jcall_Stat_isDir(JNIEnv * env, jobject instance);
jboolean jcall_Stat_isFIFO(JNIEnv * env, jobject instance);
jboolean jcall_Stat_isRegularFile(JNIEnv * env, jobject instance);
jboolean jcall_Stat_isSocket(JNIEnv * env, jobject instance);
jboolean jcall_Stat_isSymbolicLink(JNIEnv * env, jobject instance);
jstring jcall_Stat_toString(JNIEnv * env, jobject instance);
void jset_Statvfs_f_bsize(JNIEnv * env, jobject instance, jlong value);
jlong jget_Statvfs_f_bsize(JNIEnv * env, jobject instance);
void jset_Statvfs_f_frsize(JNIEnv * env, jobject instance, jlong value);
jlong jget_Statvfs_f_frsize(JNIEnv * env, jobject instance);
void jset_Statvfs_f_blocks(JNIEnv * env, jobject instance, jlong value);
jlong jget_Statvfs_f_blocks(JNIEnv * env, jobject instance);
void jset_Statvfs_f_bfree(JNIEnv * env, jobject instance, jlong value);
jlong jget_Statvfs_f_bfree(JNIEnv * env, jobject instance);
void jset_Statvfs_f_bavail(JNIEnv * env, jobject instance, jlong value);
jlong jget_Statvfs_f_bavail(JNIEnv * env, jobject instance);
void jset_Statvfs_f_files(JNIEnv * env, jobject instance, jlong value);
jlong jget_Statvfs_f_files(JNIEnv * env, jobject instance);
void jset_Statvfs_f_ffree(JNIEnv * env, jobject instance, jlong value);
jlong jget_Statvfs_f_ffree(JNIEnv * env, jobject instance);
void jset_Statvfs_f_favail(JNIEnv * env, jobject instance, jlong value);
jlong jget_Statvfs_f_favail(JNIEnv * env, jobject instance);
void jset_Statvfs_f_fsid(JNIEnv * env, jobject instance, jlong value);
jlong jget_Statvfs_f_fsid(JNIEnv * env, jobject instance);
void jset_Statvfs_f_flag(JNIEnv * env, jobject instance, jlong value);
jlong jget_Statvfs_f_flag(JNIEnv * env, jobject instance);
void jset_Statvfs_f_namemax(JNIEnv * env, jobject instance, jlong value);
jlong jget_Statvfs_f_namemax(JNIEnv * env, jobject instance);
jobject jnew_Statvfs(JNIEnv * env);
jlong jcall_Statvfs_getF_bavail(JNIEnv * env, jobject instance);
jlong jcall_Statvfs_getF_bfree(JNIEnv * env, jobject instance);
jlong jcall_Statvfs_getF_blocks(JNIEnv * env, jobject instance);
jlong jcall_Statvfs_getF_bsize(JNIEnv * env, jobject instance);
jlong jcall_Statvfs_getF_favail(JNIEnv * env, jobject instance);
jlong jcall_Statvfs_getF_ffree(JNIEnv * env, jobject instance);
jlong jcall_Statvfs_getF_files(JNIEnv * env, jobject instance);
jlong jcall_Statvfs_getF_flag(JNIEnv * env, jobject instance);
jlong jcall_Statvfs_getF_frsize(JNIEnv * env, jobject instance);
jlong jcall_Statvfs_getF_fsid(JNIEnv * env, jobject instance);
jlong jcall_Statvfs_getF_namemax(JNIEnv * env, jobject instance);
void jcall_Statvfs_setF_bavail(JNIEnv * env, jobject instance, jlong p0);
void jcall_Statvfs_setF_bfree(JNIEnv * env, jobject instance, jlong p0);
void jcall_Statvfs_setF_blocks(JNIEnv * env, jobject instance, jlong p0);
void jcall_Statvfs_setF_bsize(JNIEnv * env, jobject instance, jlong p0);
void jcall_Statvfs_setF_favail(JNIEnv * env, jobject instance, jlong p0);
void jcall_Statvfs_setF_ffree(JNIEnv * env, jobject instance, jlong p0);
void jcall_Statvfs_setF_files(JNIEnv * env, jobject instance, jlong p0);
void jcall_Statvfs_setF_flag(JNIEnv * env, jobject instance, jlong p0);
void jcall_Statvfs_setF_frsize(JNIEnv * env, jobject instance, jlong p0);
void jcall_Statvfs_setF_fsid(JNIEnv * env, jobject instance, jlong p0);
void jcall_Statvfs_setF_namemax(JNIEnv * env, jobject instance, jlong p0);
jstring jcall_Statvfs_toString(JNIEnv * env, jobject instance);
void jset_Utsname_sysname(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_Utsname_sysname(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_Utsname_sysname(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_Utsname_sysname(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_Utsname_sysname(JNIEnv * env, jobject instance);
void jset_Utsname_nodename(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_Utsname_nodename(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_Utsname_nodename(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_Utsname_nodename(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_Utsname_nodename(JNIEnv * env, jobject instance);
void jset_Utsname_release(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_Utsname_release(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_Utsname_release(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_Utsname_release(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_Utsname_release(JNIEnv * env, jobject instance);
void jset_Utsname_version(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_Utsname_version(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_Utsname_version(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_Utsname_version(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_Utsname_version(JNIEnv * env, jobject instance);
void jset_Utsname_machine(JNIEnv * env, jobject instance, jstring value);
jboolean jsetC_Utsname_machine(JNIEnv * env, jobject instance, char * value);
jboolean jsetCC_Utsname_machine(JNIEnv * env, jobject instance, const char * value);
jboolean jsetWC_Utsname_machine(JNIEnv * env, jobject instance, wchar_t * value);
jstring jget_Utsname_machine(JNIEnv * env, jobject instance);
jobject jnew_Utsname(JNIEnv * env);
jboolean jcall_Utsname_equals(JNIEnv * env, jobject instance, jobject p0);
jstring jcall_Utsname_getMachine(JNIEnv * env, jobject instance);
jstring jcall_Utsname_getNodename(JNIEnv * env, jobject instance);
jstring jcall_Utsname_getRelease(JNIEnv * env, jobject instance);
jstring jcall_Utsname_getSysname(JNIEnv * env, jobject instance);
jstring jcall_Utsname_getVersion(JNIEnv * env, jobject instance);
jint jcall_Utsname_hashCode(JNIEnv * env, jobject instance);
jstring jcall_Utsname_toString(JNIEnv * env, jobject instance);
void jset_Win32FileAttributeData_dwFileAttributes(JNIEnv * env, jobject instance, jlong value);
jlong jget_Win32FileAttributeData_dwFileAttributes(JNIEnv * env, jobject instance);
void jset_Win32FileAttributeData_nFileSizeLow(JNIEnv * env, jobject instance, jlong value);
jlong jget_Win32FileAttributeData_nFileSizeLow(JNIEnv * env, jobject instance);
void jset_Win32FileAttributeData_nFileSizeHigh(JNIEnv * env, jobject instance, jlong value);
jlong jget_Win32FileAttributeData_nFileSizeHigh(JNIEnv * env, jobject instance);
void jset_Win32FileAttributeData_ftLastAccessTimeLow(JNIEnv * env, jobject instance, jlong value);
jlong jget_Win32FileAttributeData_ftLastAccessTimeLow(JNIEnv * env, jobject instance);
void jset_Win32FileAttributeData_ftLastAccessTimeHigh(JNIEnv * env, jobject instance, jlong value);
jlong jget_Win32FileAttributeData_ftLastAccessTimeHigh(JNIEnv * env, jobject instance);
void jset_Win32FileAttributeData_ftLastWriteTimeHigh(JNIEnv * env, jobject instance, jlong value);
jlong jget_Win32FileAttributeData_ftLastWriteTimeHigh(JNIEnv * env, jobject instance);
void jset_Win32FileAttributeData_ftLastWriteTimeLow(JNIEnv * env, jobject instance, jlong value);
jlong jget_Win32FileAttributeData_ftLastWriteTimeLow(JNIEnv * env, jobject instance);
void jset_Win32FileAttributeData_ftCreationTimeHigh(JNIEnv * env, jobject instance, jlong value);
jlong jget_Win32FileAttributeData_ftCreationTimeHigh(JNIEnv * env, jobject instance);
void jset_Win32FileAttributeData_ftCreationTimeLow(JNIEnv * env, jobject instance, jlong value);
jlong jget_Win32FileAttributeData_ftCreationTimeLow(JNIEnv * env, jobject instance);
jobject jnew_Win32FileAttributeData(JNIEnv * env);
jlong jcall_Win32FileAttributeData_getDwFileAttributes(JNIEnv * env, jobject instance);
jlong jcall_Win32FileAttributeData_getFtCreationTimeHigh(JNIEnv * env, jobject instance);
jlong jcall_Win32FileAttributeData_getFtCreationTimeLow(JNIEnv * env, jobject instance);
jlong jcall_Win32FileAttributeData_getFtLastAccessTimeHigh(JNIEnv * env, jobject instance);
jlong jcall_Win32FileAttributeData_getFtLastAccessTimeLow(JNIEnv * env, jobject instance);
jlong jcall_Win32FileAttributeData_getFtLastWriteTimeHigh(JNIEnv * env, jobject instance);
jlong jcall_Win32FileAttributeData_getFtLastWriteTimeLow(JNIEnv * env, jobject instance);
jlong jcall_Win32FileAttributeData_getnFileSizeHigh(JNIEnv * env, jobject instance);
jlong jcall_Win32FileAttributeData_getnFileSizeLow(JNIEnv * env, jobject instance);
jobject jcall_Iterable_iterator(JNIEnv * env, jobject instance);
jboolean jcall_InetAddress_equals(JNIEnv * env, jobject instance, jobject p0);
jbyteArray jcall_InetAddress_getAddress(JNIEnv * env, jobject instance);
jobjectArray jcall_InetAddress_getAllByName(JNIEnv * env, jstring p0);
jobject jcall_InetAddress_getByAddress(JNIEnv * env, jstring p0, jbyteArray p1);
jobject jcall_InetAddress_getByAddress_1(JNIEnv * env, jbyteArray p0);
jobject jcall_InetAddress_getByName(JNIEnv * env, jstring p0);
jstring jcall_InetAddress_getCanonicalHostName(JNIEnv * env, jobject instance);
jstring jcall_InetAddress_getHostAddress(JNIEnv * env, jobject instance);
jstring jcall_InetAddress_getHostName(JNIEnv * env, jobject instance);
jobject jcall_InetAddress_getLocalHost(JNIEnv * env);
jobject jcall_InetAddress_getLoopbackAddress(JNIEnv * env);
jint jcall_InetAddress_hashCode(JNIEnv * env, jobject instance);
jboolean jcall_InetAddress_isAnyLocalAddress(JNIEnv * env, jobject instance);
jboolean jcall_InetAddress_isLinkLocalAddress(JNIEnv * env, jobject instance);
jboolean jcall_InetAddress_isLoopbackAddress(JNIEnv * env, jobject instance);
jboolean jcall_InetAddress_isMCGlobal(JNIEnv * env, jobject instance);
jboolean jcall_InetAddress_isMCLinkLocal(JNIEnv * env, jobject instance);
jboolean jcall_InetAddress_isMCNodeLocal(JNIEnv * env, jobject instance);
jboolean jcall_InetAddress_isMCOrgLocal(JNIEnv * env, jobject instance);
jboolean jcall_InetAddress_isMCSiteLocal(JNIEnv * env, jobject instance);
jboolean jcall_InetAddress_isMulticastAddress(JNIEnv * env, jobject instance);
jboolean jcall_InetAddress_isReachable(JNIEnv * env, jobject instance, jint p0);
jboolean jcall_InetAddress_isReachable_1(JNIEnv * env, jobject instance, jobject p0, jint p1, jint p2);
jboolean jcall_InetAddress_isSiteLocalAddress(JNIEnv * env, jobject instance);
jstring jcall_InetAddress_toString(JNIEnv * env, jobject instance);
jobject jnew_InetSocketAddress(JNIEnv * env, jint p0);
jobject jnew_InetSocketAddress_1(JNIEnv * env, jstring p0, jint p1);
jobject jnew_InetSocketAddress_2(JNIEnv * env, jobject p0, jint p1);
jobject jcall_InetSocketAddress_createUnresolved(JNIEnv * env, jstring p0, jint p1);
jboolean jcall_InetSocketAddress_equals(JNIEnv * env, jobject instance, jobject p0);
jobject jcall_InetSocketAddress_getAddress(JNIEnv * env, jobject instance);
jstring jcall_InetSocketAddress_getHostName(JNIEnv * env, jobject instance);
jstring jcall_InetSocketAddress_getHostString(JNIEnv * env, jobject instance);
jint jcall_InetSocketAddress_getPort(JNIEnv * env, jobject instance);
jint jcall_InetSocketAddress_hashCode(JNIEnv * env, jobject instance);
jboolean jcall_InetSocketAddress_isUnresolved(JNIEnv * env, jobject instance);
jstring jcall_InetSocketAddress_toString(JNIEnv * env, jobject instance);
jobject jnew_ArrayList(JNIEnv * env);
jobject jnew_ArrayList_1(JNIEnv * env, jint p0);
jobject jnew_ArrayList_2(JNIEnv * env, jobject p0);
void jcall_ArrayList_add(JNIEnv * env, jobject instance, jint p0, jobject p1);
jboolean jcall_ArrayList_add_1(JNIEnv * env, jobject instance, jobject p0);
jboolean jcall_ArrayList_addAll(JNIEnv * env, jobject instance, jint p0, jobject p1);
jboolean jcall_ArrayList_addAll_1(JNIEnv * env, jobject instance, jobject p0);
void jcall_ArrayList_clear(JNIEnv * env, jobject instance);
jobject jcall_ArrayList_clone(JNIEnv * env, jobject instance);
jboolean jcall_ArrayList_contains(JNIEnv * env, jobject instance, jobject p0);
void jcall_ArrayList_ensureCapacity(JNIEnv * env, jobject instance, jint p0);
jobject jcall_ArrayList_get(JNIEnv * env, jobject instance, jint p0);
jint jcall_ArrayList_indexOf(JNIEnv * env, jobject instance, jobject p0);
jboolean jcall_ArrayList_isEmpty(JNIEnv * env, jobject instance);
jobject jcall_ArrayList_iterator(JNIEnv * env, jobject instance);
jint jcall_ArrayList_lastIndexOf(JNIEnv * env, jobject instance, jobject p0);
jobject jcall_ArrayList_listIterator(JNIEnv * env, jobject instance);
jobject jcall_ArrayList_listIterator_1(JNIEnv * env, jobject instance, jint p0);
jobject jcall_ArrayList_remove(JNIEnv * env, jobject instance, jint p0);
jboolean jcall_ArrayList_remove_1(JNIEnv * env, jobject instance, jobject p0);
jboolean jcall_ArrayList_removeAll(JNIEnv * env, jobject instance, jobject p0);
jboolean jcall_ArrayList_retainAll(JNIEnv * env, jobject instance, jobject p0);
jobject jcall_ArrayList_set(JNIEnv * env, jobject instance, jint p0, jobject p1);
jint jcall_ArrayList_size(JNIEnv * env, jobject instance);
jobject jcall_ArrayList_subList(JNIEnv * env, jobject instance, jint p0, jint p1);
jobjectArray jcall_ArrayList_toArray(JNIEnv * env, jobject instance);
jobjectArray jcall_ArrayList_toArray_1(JNIEnv * env, jobject instance, jobjectArray p0);
void jcall_ArrayList_trimToSize(JNIEnv * env, jobject instance);
jboolean jcall_Collection_add(JNIEnv * env, jobject instance, jobject p0);
jboolean jcall_Collection_addAll(JNIEnv * env, jobject instance, jobject p0);
void jcall_Collection_clear(JNIEnv * env, jobject instance);
jboolean jcall_Collection_contains(JNIEnv * env, jobject instance, jobject p0);
jboolean jcall_Collection_containsAll(JNIEnv * env, jobject instance, jobject p0);
jboolean jcall_Collection_equals(JNIEnv * env, jobject instance, jobject p0);
jint jcall_Collection_hashCode(JNIEnv * env, jobject instance);
jboolean jcall_Collection_isEmpty(JNIEnv * env, jobject instance);
jobject jcall_Collection_iterator(JNIEnv * env, jobject instance);
jboolean jcall_Collection_remove(JNIEnv * env, jobject instance, jobject p0);
jboolean jcall_Collection_removeAll(JNIEnv * env, jobject instance, jobject p0);
jboolean jcall_Collection_retainAll(JNIEnv * env, jobject instance, jobject p0);
jint jcall_Collection_size(JNIEnv * env, jobject instance);
jobjectArray jcall_Collection_toArray(JNIEnv * env, jobject instance);
jobjectArray jcall_Collection_toArray_1(JNIEnv * env, jobject instance, jobjectArray p0);
jboolean jcall_Iterator_hasNext(JNIEnv * env, jobject instance);
jobject jcall_Iterator_next(JNIEnv * env, jobject instance);
void jcall_Iterator_remove(JNIEnv * env, jobject instance);
void jthrow_FileIsDirectoryException(JNIEnv * env, jstring p0);
void jthrowC_FileIsDirectoryException(JNIEnv * env, char* p0);
void jthrowCC_FileIsDirectoryException(JNIEnv * env, const char* p0);
void jthrow_InconsistentMutexException(JNIEnv * env);
void jthrow_InvalidFileDescriptorException(JNIEnv * env);
void jthrow_MemoryFaultException(JNIEnv * env, jstring p0);
void jthrowC_MemoryFaultException(JNIEnv * env, char* p0);
void jthrowCC_MemoryFaultException(JNIEnv * env, const char* p0);
void jthrow_MemoryPoisonedException(JNIEnv * env, jstring p0);
void jthrowC_MemoryPoisonedException(JNIEnv * env, char* p0);
void jthrowCC_MemoryPoisonedException(JNIEnv * env, const char* p0);
void jthrow_MutexAbandonedException(JNIEnv * env, jlong p0);
void jthrow_OperationInProgressException(JNIEnv * env);
void jthrow_OperationInProgressException_1(JNIEnv * env, jstring p0);
void jthrowC_OperationInProgressException_1(JNIEnv * env, char* p0);
void jthrowCC_OperationInProgressException_1(JNIEnv * env, const char* p0);
void jthrow_PermissionDeniedException(JNIEnv * env, jstring p0);
void jthrowC_PermissionDeniedException(JNIEnv * env, char* p0);
void jthrowCC_PermissionDeniedException(JNIEnv * env, const char* p0);
void jthrow_PermissionDeniedException_1(JNIEnv * env, jstring p0, jstring p1);
void jthrowC_PermissionDeniedException_1(JNIEnv * env, char* p0, char* p1);
void jthrowCC_PermissionDeniedException_1(JNIEnv * env, const char* p0, const char* p1);
void jthrow_QuotaExceededException(JNIEnv * env, jstring p0);
void jthrowC_QuotaExceededException(JNIEnv * env, char* p0);
void jthrowCC_QuotaExceededException(JNIEnv * env, const char* p0);
void jthrow_QuotaExceededException_1(JNIEnv * env, jstring p0, jstring p1, jstring p2);
void jthrowC_QuotaExceededException_1(JNIEnv * env, char* p0, char* p1, char* p2);
void jthrowCC_QuotaExceededException_1(JNIEnv * env, const char* p0, const char* p1, const char* p2);
void jthrow_ResourceBusyException(JNIEnv * env, jstring p0);
void jthrowC_ResourceBusyException(JNIEnv * env, char* p0);
void jthrowCC_ResourceBusyException(JNIEnv * env, const char* p0);
void jthrow_ResourceTemporarilyUnavailableException(JNIEnv * env, jstring p0);
void jthrowC_ResourceTemporarilyUnavailableException(JNIEnv * env, char* p0);
void jthrowCC_ResourceTemporarilyUnavailableException(JNIEnv * env, const char* p0);
void jthrow_SharingViolationException(JNIEnv * env, jstring p0);
void jthrowC_SharingViolationException(JNIEnv * env, char* p0);
void jthrowCC_SharingViolationException(JNIEnv * env, const char* p0);
void jthrow_SharingViolationException_1(JNIEnv * env, jstring p0, jstring p1, jstring p2);
void jthrowC_SharingViolationException_1(JNIEnv * env, char* p0, char* p1, char* p2);
void jthrowCC_SharingViolationException_1(JNIEnv * env, const char* p0, const char* p1, const char* p2);
void jthrow_ShellExecuteException(JNIEnv * env, jlong p0, jlong p1);
void jthrow_UnknownNativeErrorException(JNIEnv * env);
void jthrow_UnknownNativeErrorException_1(JNIEnv * env, jlong p0);
void jthrow_UnrecoverableMutexException(JNIEnv * env);
void jthrow_FileNotFoundException(JNIEnv * env);
void jthrow_FileNotFoundException_1(JNIEnv * env, jstring p0);
void jthrowC_FileNotFoundException_1(JNIEnv * env, char* p0);
void jthrowCC_FileNotFoundException_1(JNIEnv * env, const char* p0);
void jthrow_IOException(JNIEnv * env);
void jthrow_IOException_1(JNIEnv * env, jstring p0);
void jthrowC_IOException_1(JNIEnv * env, char* p0);
void jthrowCC_IOException_1(JNIEnv * env, const char* p0);
void jthrow_IOException_2(JNIEnv * env, jstring p0, jobject p1);
void jthrowC_IOException_2(JNIEnv * env, char* p0, jobject p1);
void jthrowCC_IOException_2(JNIEnv * env, const char* p0, jobject p1);
void jthrow_IOException_3(JNIEnv * env, jobject p0);
void jthrow_Exception(JNIEnv * env);
void jthrow_Exception_1(JNIEnv * env, jstring p0);
void jthrowC_Exception_1(JNIEnv * env, char* p0);
void jthrowCC_Exception_1(JNIEnv * env, const char* p0);
void jthrow_Exception_2(JNIEnv * env, jstring p0, jobject p1);
void jthrowC_Exception_2(JNIEnv * env, char* p0, jobject p1);
void jthrowCC_Exception_2(JNIEnv * env, const char* p0, jobject p1);
void jthrow_Exception_3(JNIEnv * env, jobject p0);
void jthrow_IllegalArgumentException(JNIEnv * env);
void jthrow_IllegalArgumentException_1(JNIEnv * env, jstring p0);
void jthrowC_IllegalArgumentException_1(JNIEnv * env, char* p0);
void jthrowCC_IllegalArgumentException_1(JNIEnv * env, const char* p0);
void jthrow_IllegalArgumentException_2(JNIEnv * env, jstring p0, jobject p1);
void jthrowC_IllegalArgumentException_2(JNIEnv * env, char* p0, jobject p1);
void jthrowCC_IllegalArgumentException_2(JNIEnv * env, const char* p0, jobject p1);
void jthrow_IllegalArgumentException_3(JNIEnv * env, jobject p0);
void jthrow_IllegalMonitorStateException(JNIEnv * env);
void jthrow_IllegalMonitorStateException_1(JNIEnv * env, jstring p0);
void jthrowC_IllegalMonitorStateException_1(JNIEnv * env, char* p0);
void jthrowCC_IllegalMonitorStateException_1(JNIEnv * env, const char* p0);
void jthrow_IllegalStateException(JNIEnv * env);
void jthrow_IllegalStateException_1(JNIEnv * env, jstring p0);
void jthrowC_IllegalStateException_1(JNIEnv * env, char* p0);
void jthrowCC_IllegalStateException_1(JNIEnv * env, const char* p0);
void jthrow_IllegalStateException_2(JNIEnv * env, jstring p0, jobject p1);
void jthrowC_IllegalStateException_2(JNIEnv * env, char* p0, jobject p1);
void jthrowCC_IllegalStateException_2(JNIEnv * env, const char* p0, jobject p1);
void jthrow_IllegalStateException_3(JNIEnv * env, jobject p0);
void jthrow_NullPointerException(JNIEnv * env);
void jthrow_NullPointerException_1(JNIEnv * env, jstring p0);
void jthrowC_NullPointerException_1(JNIEnv * env, char* p0);
void jthrowCC_NullPointerException_1(JNIEnv * env, const char* p0);
void jthrow_OutOfMemoryError(JNIEnv * env);
void jthrow_OutOfMemoryError_1(JNIEnv * env, jstring p0);
void jthrowC_OutOfMemoryError_1(JNIEnv * env, char* p0);
void jthrowCC_OutOfMemoryError_1(JNIEnv * env, const char* p0);
void jthrow_UnsupportedOperationException(JNIEnv * env);
void jthrow_UnsupportedOperationException_1(JNIEnv * env, jstring p0);
void jthrowC_UnsupportedOperationException_1(JNIEnv * env, char* p0);
void jthrowCC_UnsupportedOperationException_1(JNIEnv * env, const char* p0);
void jthrow_UnsupportedOperationException_2(JNIEnv * env, jstring p0, jobject p1);
void jthrowC_UnsupportedOperationException_2(JNIEnv * env, char* p0, jobject p1);
void jthrowCC_UnsupportedOperationException_2(JNIEnv * env, const char* p0, jobject p1);
void jthrow_UnsupportedOperationException_3(JNIEnv * env, jobject p0);
void jthrow_BindException(JNIEnv * env);
void jthrow_BindException_1(JNIEnv * env, jstring p0);
void jthrowC_BindException_1(JNIEnv * env, char* p0);
void jthrowCC_BindException_1(JNIEnv * env, const char* p0);
void jthrow_ConnectException(JNIEnv * env);
void jthrow_ConnectException_1(JNIEnv * env, jstring p0);
void jthrowC_ConnectException_1(JNIEnv * env, char* p0);
void jthrowCC_ConnectException_1(JNIEnv * env, const char* p0);
void jthrow_AccessDeniedException(JNIEnv * env, jstring p0);
void jthrowC_AccessDeniedException(JNIEnv * env, char* p0);
void jthrowCC_AccessDeniedException(JNIEnv * env, const char* p0);
void jthrow_AccessDeniedException_1(JNIEnv * env, jstring p0, jstring p1, jstring p2);
void jthrowC_AccessDeniedException_1(JNIEnv * env, char* p0, char* p1, char* p2);
void jthrowCC_AccessDeniedException_1(JNIEnv * env, const char* p0, const char* p1, const char* p2);
void jthrow_FileAlreadyExistsException(JNIEnv * env, jstring p0);
void jthrowC_FileAlreadyExistsException(JNIEnv * env, char* p0);
void jthrowCC_FileAlreadyExistsException(JNIEnv * env, const char* p0);
void jthrow_FileAlreadyExistsException_1(JNIEnv * env, jstring p0, jstring p1, jstring p2);
void jthrowC_FileAlreadyExistsException_1(JNIEnv * env, char* p0, char* p1, char* p2);
void jthrowCC_FileAlreadyExistsException_1(JNIEnv * env, const char* p0, const char* p1, const char* p2);
void jthrow_FileSystemLoopException(JNIEnv * env, jstring p0);
void jthrowC_FileSystemLoopException(JNIEnv * env, char* p0);
void jthrowCC_FileSystemLoopException(JNIEnv * env, const char* p0);
void jthrow_InvalidPathException(JNIEnv * env, jstring p0, jstring p1);
void jthrowC_InvalidPathException(JNIEnv * env, char* p0, char* p1);
void jthrowCC_InvalidPathException(JNIEnv * env, const char* p0, const char* p1);
void jthrow_InvalidPathException_1(JNIEnv * env, jstring p0, jstring p1, jint p2);
void jthrowC_InvalidPathException_1(JNIEnv * env, char* p0, char* p1, jint p2);
void jthrowCC_InvalidPathException_1(JNIEnv * env, const char* p0, const char* p1, jint p2);
void jthrow_NotDirectoryException(JNIEnv * env, jstring p0);
void jthrowC_NotDirectoryException(JNIEnv * env, char* p0);
void jthrowCC_NotDirectoryException(JNIEnv * env, const char* p0);
void jthrow_NotLinkException(JNIEnv * env, jstring p0);
void jthrowC_NotLinkException(JNIEnv * env, char* p0);
void jthrowCC_NotLinkException(JNIEnv * env, const char* p0);
void jthrow_NotLinkException_1(JNIEnv * env, jstring p0, jstring p1, jstring p2);
void jthrowC_NotLinkException_1(JNIEnv * env, char* p0, char* p1, char* p2);
void jthrowCC_NotLinkException_1(JNIEnv * env, const char* p0, const char* p1, const char* p2);
void jthrow_ReadOnlyFileSystemException(JNIEnv * env);
void jthrow_NoSuchElementException(JNIEnv * env);
void jthrow_NoSuchElementException_1(JNIEnv * env, jstring p0);
void jthrowC_NoSuchElementException_1(JNIEnv * env, char* p0);
void jthrowCC_NoSuchElementException_1(JNIEnv * env, const char* p0);
